{"version":3,"file":"static/js/861.722613ce.chunk.js","mappings":"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","sources":["contants.tsx","webgl/clipping_stencil/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import * as THREE from 'three'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport { useControls } from 'leva'\n\nimport { aspect_ratio } from '../../contants'\n\nconst planes = [\n  new THREE.Plane(new THREE.Vector3(- 1, 0, 0), 0),\n  new THREE.Plane(new THREE.Vector3(0, - 1, 0), 0),\n  new THREE.Plane(new THREE.Vector3(0, 0, - 1), 0)\n]\n\nconst params = {\n  animate: true,\n  planeX: {\n    constant: 0,\n    negated: false,\n    displayHelper: false\n  },\n  planeY: {\n    constant: 0,\n    negated: false,\n    displayHelper: false\n  },\n  planeZ: {\n    constant: 0,\n    negated: false,\n    displayHelper: false\n  }\n}\n\nconst planeHelpers = planes.map(p => new THREE.PlaneHelper(p, 2, 0xffffff))\n\nconst planeObjects: any[] = []\nconst planeGeom = new THREE.PlaneGeometry(4, 4)\n\nconst geometry = new THREE.TorusKnotGeometry(0.4, 0.15, 220, 60)\nconst object = new THREE.Group()\n\nfunction createPlaneStencilGroup(geometry: THREE.TorusKnotGeometry, plane: THREE.Plane, renderOrder: number) {\n  const group = new THREE.Group()\n  const baseMat = new THREE.MeshBasicMaterial()\n  baseMat.depthWrite = false\n  baseMat.depthTest = false\n  baseMat.colorWrite = false\n  baseMat.stencilWrite = true\n  baseMat.stencilFunc = THREE.AlwaysStencilFunc\n\n  // back faces\n  const mat0 = baseMat.clone()\n  mat0.side = THREE.BackSide\n  mat0.clippingPlanes = [plane]\n  mat0.stencilFail = THREE.IncrementWrapStencilOp\n  mat0.stencilZFail = THREE.IncrementWrapStencilOp\n  mat0.stencilZPass = THREE.IncrementWrapStencilOp\n\n  const mesh0 = new THREE.Mesh(geometry, mat0)\n  mesh0.renderOrder = renderOrder\n  group.add(mesh0)\n\n  // front faces\n  const mat1 = baseMat.clone()\n  mat1.side = THREE.FrontSide\n  mat1.clippingPlanes = [plane]\n  mat1.stencilFail = THREE.DecrementWrapStencilOp\n  mat1.stencilZFail = THREE.DecrementWrapStencilOp\n  mat1.stencilZPass = THREE.DecrementWrapStencilOp\n\n  const mesh1 = new THREE.Mesh(geometry, mat1)\n  mesh1.renderOrder = renderOrder\n\n  group.add(mesh1)\n\n  return group\n}\n\nconst Meshes = () => {\n  const poGroups = []\n  for (let i=0; i<3; i++) {\n    const poGroup = new THREE.Group()\n    const plane = planes[i]\n    const stencilGroup = createPlaneStencilGroup(geometry, plane, i + 1)\n\n    // plane is clipped by the other clipping planes\n    const planeMat =\n      new THREE.MeshStandardMaterial({\n\n        color: 0xE91E63,\n        metalness: 0.1,\n        roughness: 0.75,\n        clippingPlanes: planes.filter(p => p !== plane),\n\n        stencilWrite: true,\n        stencilRef: 0,\n        stencilFunc: THREE.NotEqualStencilFunc,\n        stencilFail: THREE.ReplaceStencilOp,\n        stencilZFail: THREE.ReplaceStencilOp,\n        stencilZPass: THREE.ReplaceStencilOp,\n\n      })\n    const po = new THREE.Mesh(planeGeom, planeMat)\n    po.onAfterRender = (renderer) => {\n      renderer.clearStencil()\n    }\n\n    po.renderOrder = i + 11\n\n    object.add(stencilGroup)\n    poGroup.add(po)\n    planeObjects.push(po)\n    poGroups.push(\n      <primitive key={i} object={poGroup} />\n    )\n    // scene.add(poGroup)\n  }\n\n  const material = new THREE.MeshStandardMaterial({\n    color: 0xFFC107,\n    metalness: 0.1,\n    roughness: 0.75,\n    clippingPlanes: planes,\n    clipShadows: true,\n    shadowSide: THREE.DoubleSide,\n  })\n\n  // add the color\n  const clippedColorFront = new THREE.Mesh(geometry, material)\n  clippedColorFront.castShadow = true\n  clippedColorFront.renderOrder = 6\n  object.add(clippedColorFront)\n\n  useFrame((_, delta) => {\n    if (params.animate) {\n      object.rotation.x += delta * 0.5\n      object.rotation.y += delta * 0.2\n    }\n\n    for (let i = 0; i < planeObjects.length; i++) {\n      const plane = planes[i]\n      const po = planeObjects[i]\n      plane.coplanarPoint(po.position)\n      po.lookAt(\n        po.position.x - plane.normal.x,\n        po.position.y - plane.normal.y,\n        po.position.z - plane.normal.z,\n      )\n    }\n  })\n\n  return (\n    <>\n      <primitive object={object} />\n      {poGroups}\n    </>\n  )\n}\n\nconst Ground = () => {\n  return (\n    <mesh rotation={[-Math.PI/2, 0, 0]} position={[0, -1, 0]} receiveShadow >\n      <planeGeometry args={[9, 9, 1, 1]} />\n      <shadowMaterial color={0x000000} opacity={0.25} side={THREE.DoubleSide} />\n    </mesh>\n  )\n}\n\nconst Controls = () => {\n  const { gl } = useThree()\n  gl.setClearColor(0x263238)\n  gl.localClippingEnabled = true\n\n  useControls({\n    'animate': {\n      value: params.animate,\n      onChange: (v: boolean) => params.animate = v\n    }\n  })\n\n  useControls('planeX', {\n    'displayHelper': {\n      value: params.planeX.displayHelper,\n      onChange: (v) => planeHelpers[0].visible = v\n    },\n    'contant': {\n      value: params.planeX.constant,\n      min: -1, max: 1,\n      onChange: (d) => planes[0].constant = d\n    },\n    'negated': {\n      value: params.planeX.negated,\n      onChange: () => {\n        planes[0].negate()\n        params.planeX.constant = planes[0].constant\n      }\n    }\n  })\n\n  useControls('planeY', {\n    'displayHelper': {\n      value: params.planeY.displayHelper,\n      onChange: (v) => planeHelpers[1].visible = v\n    },\n    'contant': {\n      value: params.planeY.constant,\n      min: -1, max: 1,\n      onChange: (d) => planes[1].constant = d\n    },\n    'negated': {\n      value: params.planeY.negated,\n      onChange: () => {\n        planes[1].negate()\n        params.planeY.constant = planes[1].constant\n      }\n    }\n  })\n\n  useControls('planeZ', {\n    'displayHelper': {\n      value: params.planeZ.displayHelper,\n      onChange: (v) => planeHelpers[2].visible = v\n    },\n    'contant': {\n      value: params.planeZ.constant,\n      min: -1, max: 1,\n      onChange: (d) => planes[2].constant = d\n    },\n    'negated': {\n      value: params.planeZ.negated,\n      onChange: () => {\n        planes[2].negate()\n        params.planeZ.constant = planes[2].constant\n      }\n    }\n  })\n\n  return null\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{position: [2, 2, 2], fov: 36, aspect: aspect_ratio, near: 1, far: 100}} shadows>\n      <ambientLight args={[0xffffff, 0.5]} />\n      <directionalLight args={[0xffffff, 1]} position={[5, 10, 7.5]} castShadow\n        // shadow-camera-right={2} shadow-camera-left={-2}\n        // shadow-camera-top={2} shadow-camera-bottom={-2}\n        shadow-mapSize={[1024, 1024]}\n      >\n        <orthographicCamera attach='shadow-camera' args={[-2, 2, 2, -2]} />\n      </directionalLight>\n      <> \n        {planeHelpers.map((ph, i) => {\n          ph.visible = false\n          return <primitive key={i} object={ph} />\n        })}\n      </>\n      <Meshes />\n      <Ground />\n      <Controls />\n      <OrbitControls \n        minDistance={2}\n        maxDistance={20}\n      />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","planes","THREE","params","animate","planeX","constant","negated","displayHelper","planeY","planeZ","planeHelpers","map","p","planeObjects","planeGeom","geometry","object","Meshes","poGroups","i","poGroup","plane","stencilGroup","renderOrder","group","baseMat","depthWrite","depthTest","colorWrite","stencilWrite","stencilFunc","mat0","clone","side","clippingPlanes","stencilFail","stencilZFail","stencilZPass","mesh0","add","mat1","mesh1","createPlaneStencilGroup","planeMat","color","metalness","roughness","filter","stencilRef","po","onAfterRender","renderer","clearStencil","push","material","clipShadows","shadowSide","clippedColorFront","castShadow","useFrame","_","delta","rotation","x","y","length","coplanarPoint","position","lookAt","normal","z","Ground","Math","PI","receiveShadow","args","opacity","Controls","gl","useThree","setClearColor","localClippingEnabled","useControls","value","onChange","v","visible","min","max","d","negate","camera","fov","aspect","near","far","shadows","attach","ph","minDistance","maxDistance"],"sourceRoot":""}