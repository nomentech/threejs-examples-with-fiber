{"version":3,"file":"static/js/848.f17d02ad.chunk.js","mappings":"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","sources":["contants.tsx","../node_modules/three-stdlib/effects/StereoEffect.js","webgl/effects_stereo/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { StereoCamera, Vector2 } from 'three';\n\nconst StereoEffect = function (renderer) {\n  const _stereo = new StereoCamera();\n\n  _stereo.aspect = 0.5;\n  const size = new Vector2();\n\n  this.setEyeSeparation = eyeSep => {\n    _stereo.eyeSep = eyeSep;\n  };\n\n  this.setSize = (width, height) => {\n    renderer.setSize(width, height);\n  };\n\n  this.render = (scene, camera) => {\n    scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _stereo.update(camera);\n\n    renderer.getSize(size);\n    if (renderer.autoClear) renderer.clear();\n    renderer.setScissorTest(true);\n    renderer.setScissor(0, 0, size.width / 2, size.height);\n    renderer.setViewport(0, 0, size.width / 2, size.height);\n    renderer.render(scene, _stereo.cameraL);\n    renderer.setScissor(size.width / 2, 0, size.width / 2, size.height);\n    renderer.setViewport(size.width / 2, 0, size.width / 2, size.height);\n    renderer.render(scene, _stereo.cameraR);\n    renderer.setScissorTest(false);\n  };\n};\n\nexport { StereoEffect };\n","import { useEffect, useMemo } from 'react'\nimport * as THREE from 'three'\nimport { StereoEffect } from 'three-stdlib'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\n\nimport { aspect_ratio } from '../../contants'\n\nimport nx from '../../textures/cube/Park3Med/nx.jpg'\nimport ny from '../../textures/cube/Park3Med/ny.jpg'\nimport nz from '../../textures/cube/Park3Med/nz.jpg'\nimport px from '../../textures/cube/Park3Med/px.jpg'\nimport py from '../../textures/cube/Park3Med/py.jpg'\nimport pz from '../../textures/cube/Park3Med/pz.jpg'\n\nconst urls = [px, nx, py, ny, pz, nz]\nconst textureCube = new THREE.CubeTextureLoader().load(urls)\ntextureCube.mapping = THREE.CubeRefractionMapping\n\nconst Effect = () => {\n  const { gl, size } = useThree()\n\n  const effect = useMemo(() => {\n    return new StereoEffect(gl)\n  }, [])\n\n  useEffect(() => {\n    effect.setSize(size.width, size.height)\n  }, [size])\n\n  useFrame(({ scene, camera}) => {\n    effect.render(scene, camera)\n  }, 1)\n\n  return null\n}\n\nconst Meshes = () => {\n  const count=500\n\n  const spheres = useMemo(() => {\n    const spheres: any[] = []\n    const geometry = new THREE.SphereGeometry(100, 32, 16)\n    const material = new THREE.MeshBasicMaterial({\n      color: 0xffffff,\n      refractionRatio: 0.95,\n      envMap: textureCube\n    })\n\n    for (let i=0; i<count; i++) {\n      const sphere = new THREE.Mesh(geometry, material)\n      sphere.position.x = sphere.position.y = sphere.position.z = Math.random() * 10000 - 5000\n      sphere.scale.x = sphere.scale.y = sphere.scale.z = Math.random() * 3 + 1\n      spheres.push(sphere)\n    }\n    return spheres\n  }, [])\n  \n  useFrame(({ scene, camera, clock, mouse }) => {\n    const timer = clock.getElapsedTime() * 0.1\n\n    camera.position.x += (mouse.x * 1000 - camera.position.x)\n    camera.position.y += (mouse.y * 1000 - camera.position.y)\n    camera.lookAt(scene.position)\n    \n    spheres.map((sphere, i) => {\n      sphere.position.x = 5000 * Math.cos(timer+i)\n      sphere.position.y = 5000 * Math.sin(timer+i*1.1)\n    })\n  })\n\n  return (\n    <>\n      { spheres.map((sphere, i) => (\n        <primitive key={i} object={sphere} />\n      ))}\n    </>\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{ position: [0, 0, 3200], fov: 60, aspect: aspect_ratio, near:1, far: 100000 }} gl={{ pixelRatio: devicePixelRatio}} >\n      <primitive attach='background' object={textureCube} />\n      <Meshes />\n      <Effect />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","StereoEffect","renderer","_stereo","StereoCamera","aspect","size","Vector2","this","setEyeSeparation","eyeSep","setSize","width","height","render","scene","camera","updateMatrixWorld","parent","update","getSize","autoClear","clear","setScissorTest","setScissor","setViewport","cameraL","cameraR","urls","px","nx","py","ny","pz","nz","textureCube","THREE","load","mapping","Effect","useThree","gl","effect","useMemo","useEffect","useFrame","Meshes","spheres","geometry","material","color","refractionRatio","envMap","i","sphere","position","x","y","z","Math","random","scale","push","clock","mouse","timer","getElapsedTime","lookAt","map","cos","sin","object","fov","near","far","pixelRatio","devicePixelRatio","attach"],"sourceRoot":""}