{"version":3,"file":"static/js/746.f79f6f12.chunk.js","mappings":"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","sources":["webgl/animation_skinning_blending/Example.tsx"],"sourcesContent":["import { useEffect } from \"react\"\nimport { AnimationAction, AnimationMixer, Group, SkeletonHelper } from \"three\"\nimport { Canvas, useFrame } from \"@react-three/fiber\"\nimport { useGLTF } from \"@react-three/drei\"\nimport { button, useControls } from 'leva'\n\nimport soldier from '../../models/Soldier.glb'\n\nlet model: Group, skeleton: SkeletonHelper, mixer: AnimationMixer\nconst crossFadeControls: any[] = []\n\nlet idleWeight: number, walkWeight: number, runWeight: number\nlet idleAction: AnimationAction , walkAction: AnimationAction, runAction: AnimationAction\nlet actions: Array<AnimationAction>\n\nlet singleStepMode = false;\nlet sizeOfNextStep = 0;\n\nuseGLTF.preload(soldier)\n\n// This function is needed, since animationAction.crossFadeTo() disables its start action and sets\n// the start action's timeScale to ((start animation's duration) / (end animation's duration))\nconst setWeight = (action: AnimationAction, weight: number) => {\n  action.enabled = true\n  action.setEffectiveTimeScale(1)\n  action.setEffectiveWeight(weight)\n}\n\nconst deactivateAllActions = () => {\n  actions.forEach(action => {\n    action.stop()\n  });\n}\n\nconst activateAllActions = () => {\n  setWeight(idleAction, settings[\"modify idle weight\"])\n  setWeight(walkAction, settings[\"modify walk weight\"])\n  setWeight(runAction, settings[\"modify run weight\"])\n\n  actions.forEach(action => {\n    action.play()\n  })\n}\n\nconst pauseContinue = () => {\n  if (singleStepMode) {\n    singleStepMode = false\n    unPauseAllActions()\n  } else {\n    if (idleAction.paused) {\n      unPauseAllActions()\n    } else {\n      pauseAllActions()\n    }\n  }\n}\n\nconst pauseAllActions = () => {\n  actions.forEach(action => {\n    action.paused = true\n  })\n}\n\nconst unPauseAllActions = () => {\n  actions.forEach(action => {\n    action.paused = false\n  })\n}\n\nconst showModel = (visibility: boolean) => {\n  model.visible = visibility\n}\n\n\nconst showSkeleton = (visibility: boolean) => {\n  skeleton.visible = visibility\n}\n\nconst modifyTimeScale = (speed: number) => {\n  mixer.timeScale = speed\n}\n\nconst toSingleStepMode = (size: number) => {\n  unPauseAllActions()\n\n  singleStepMode = true\n  sizeOfNextStep = size\n}\n\nconst prepareCrossFade = (startAction: AnimationAction, endAction: AnimationAction, defaultDuration: number) => {\n  // Switch default / custom crossfade duration (according to the user's choice)\n  const duration = setCrossFadeDuration(defaultDuration)\n\n  // Make sure that we don't go on in singleStepMode, and that all actions are unpaused\n  singleStepMode = false\n  unPauseAllActions()\n\n  // If the current action is 'idle' (duration 4 sec), execute the crossfade immediately;\n  // else wait until the current action has finished its current loop\n  if ( startAction === idleAction ) {\n    executeCrossFade(startAction, endAction, duration)\n  } else {\n    synchronizeCrossFade(startAction, endAction, duration)\n  }\n}\n\nconst setCrossFadeDuration = (defaultDuration: number) => {\n  // Switch default crossfade duration <-> custom crossfade duration\n  if (settings[\"use default duration\"]) {\n    return defaultDuration\n  } else {\n    return settings[\"set custom duration\"]\n  }\n}\n\nconst synchronizeCrossFade = (startAction: AnimationAction, endAction: AnimationAction, duration: number) => {\n  const onLoopFinished = (event: any) => {\n    if (event.action === startAction) {\n      mixer.removeEventListener(\"loop\", onLoopFinished)\n      executeCrossFade(startAction, endAction, duration)\n    }\n  }\n\n  mixer.addEventListener(\"loop\", onLoopFinished)\n}\n\nconst executeCrossFade = (startAction: AnimationAction, endAction: AnimationAction, duration: number) => {\n  // Not only the start action, but also the end action must get a weight of 1 before fading\n  // (concerning the start action this is already guaranteed in this place)\n  setWeight(endAction, 1)\n  endAction.time = 0\n\n  // Crossfade with warping - you can also try without warping by setting the third parameter to false\n  startAction.crossFadeTo( endAction, duration, true )\n}\n\n// Called by the render loop\nconst updateWeightSliders = () => {\n  settings[\"modify idle weight\"] = idleWeight\n  settings[\"modify walk weight\"] = walkWeight\n  settings[\"modify run weight\"] = runWeight\n}\n\n// Called by the render loop\nconst updateCrossFadeControls = () => {\n  if (idleWeight === 1 && walkWeight === 0 && runWeight === 0) {\n    crossFadeControls[0].disable()\n    crossFadeControls[1].enable()\n    crossFadeControls[2].disable()\n    crossFadeControls[3].disable()\n  }\n\n  if (idleWeight === 0 && walkWeight === 1 && runWeight === 0) {\n    crossFadeControls[0].enable()\n    crossFadeControls[1].disable()\n    crossFadeControls[2].enable()\n    crossFadeControls[3].disable()\n  }\n\n  if (idleWeight === 0 && walkWeight === 0 && runWeight === 1) {\n    crossFadeControls[0].disable()\n    crossFadeControls[1].disable()\n    crossFadeControls[2].disable()\n    crossFadeControls[3].enable()\n  }\n}\n\nconst settings = {\n  \"show model\": true,\n  \"show skeleton\": false,\n  \"deactivate all\": deactivateAllActions,\n  \"activate all\": activateAllActions,\n  \"pause/continue\": pauseContinue,\n  \"make single step\": toSingleStepMode,\n  \"modify step size\": 0.05,\n  \"from walk to idle\": () => {\n    prepareCrossFade(walkAction, idleAction, 1.0)\n  },\n  \"from idle to walk\": () => {\n    prepareCrossFade(idleAction, walkAction, 0.5)\n  },\n  \"from walk to run\": () => {\n    prepareCrossFade(walkAction, runAction, 2.5)\n  },\n  \"from run to walk\": () => {\n    prepareCrossFade(runAction, walkAction, 5.0)\n  },\n  \"use default duration\": true,\n  \"set custom duration\": 3.5,\n  \"modify idle weight\": 0.0,\n  \"modify walk weight\": 1.0,\n  \"modify run weight\": 0.0,\n  \"modify time scale\": 1.0\n}\n\nconst Model = () => {\n  const { scene, animations }: any = useGLTF(soldier)\n  // const clips = useAnimations(animations, scene)\n\n  model = scene\n  mixer = new AnimationMixer(model)\n\n  idleAction = mixer.clipAction(animations[0])\n  walkAction = mixer.clipAction(animations[3])\n  runAction = mixer.clipAction(animations[1])\n  actions = [ idleAction, walkAction, runAction ]\n\n  skeleton = new SkeletonHelper(scene)\n  skeleton.visible = true\n\n  useFrame((_, delta) => {\n    idleWeight = idleAction.getEffectiveWeight();\n    walkWeight = walkAction.getEffectiveWeight();\n    runWeight = runAction.getEffectiveWeight();\n\n    // Update the panel values if weights are modified from \"outside\" (by crossfadings)\n    updateWeightSliders()\n\n    // Enable/disable crossfade controls according to current weight values\n    // updateCrossFadeControls()\n\n    // Get the time elapsed since the last frame, used for mixer update (if not in single step mode)\n    let mixerUpdateDelta = delta\n\n    // If in single step mode, make one step and then do nothing (until the user clicks again)\n    if (singleStepMode) {\n      mixerUpdateDelta = sizeOfNextStep\n      sizeOfNextStep = 0\n    }\n    mixer.update(mixerUpdateDelta)\n  })\n\n  useEffect(() => {\n    scene.traverse((obj: any) => obj.isMesh && (obj.castShadow = true))\n    activateAllActions()\n  }, [scene])\n\n  return (\n    <>\n      <primitive object={scene} />\n      <primitive object={skeleton} />\n    </>\n  )\n}\n\nconst Ground = () => {\n  return (\n    <mesh rotation={[-Math.PI/2, 0, 0]} receiveShadow>\n      <planeGeometry args={[100, 100]} />\n      <meshPhongMaterial color={0x999999} depthWrite={false} />\n    </mesh>\n  )\n}\n\nconst Controls = () => {\n  useControls('Visibility', {\n    \"show model\": {\n      value: settings['show model'],\n      onChange: showModel\n    },\n    \"show skeleton\": {\n      value: settings['show skeleton'],\n      onChange: showSkeleton\n    }\n  })\n\n  useControls('Activation/Deactivation', {\n    \"deactivate all\": button(settings['deactivate all']),\n    \"activate all\": button(settings['activate all'])\n  })\n\n  // https://github.com/pmndrs/leva/issues/288\n  useControls('Pausing/Stepping', {\n    \"pause/continue\": button(settings['pause/continue']),\n    \"make single step\": button((get) => settings['make single step'](get('Pausing/Stepping.modify step size'))),\n    \"modify step size\": { value: settings['modify step size'], max: 0.1, min: 0.01, step: 0.001 },\n  })\n\n  useControls('Crossfading', {\n    \"from walk to idle\": button(settings['from walk to idle']),\n    \"from idle to walk\": button(settings['from idle to walk']),\n    \"from walk to run\": button(settings['from walk to run']),\n    \"from run to walk\": button(settings['from run to walk']),\n    \"use default duration\": settings['use default duration'],\n    \"set custom duration\": { value: settings['set custom duration'], max: 10, min: 0, step: 0.01 },\n  })\n\n  useControls('Blend Weights', {\n    \"modify idle weight\": {\n      value: settings['modify idle weight'], max: 1.0, min: 0.0, step: 0.01,\n      onChange: (weight: number) => {\n        setWeight(idleAction, weight)\n      }\n    },\n    \"modify walk weight\": {\n      value: settings['modify walk weight'], max: 1.0, min: 0.0, step: 0.01,\n      onChange: (weight: number) => {\n        setWeight(walkAction, weight)\n      }\n    },\n    \"modify run weight\": {\n      value: settings['modify run weight'], max: 1.0, min: 0.0, step: 0.01,\n      onChange: (weight: number) => {\n        setWeight(runAction, weight)\n      }\n    }\n  })\n\n  useControls('General Speed', {\n    \"modify time scale\": {\n      value: settings['modify time scale'], max: 1.5, min: 0.0, step: 0.01,\n      onChange: modifyTimeScale\n    }\n  })\n\n  return null\n}\n\nconst Example = () => {\n  return (\n    <Canvas \n      camera={{position: [1, 2, -3], fov: 45, near: 1, far: 1000}} \n      dpr={[1, 2]} \n      shadows\n      onCreated={ ({ camera }) => { camera.lookAt(0, 1, 0) } }\n    >\n      <color attach=\"background\" args={[0xa0a0a0]} />\n      <fog attach=\"fog\" color={0xa0a0a0} near={10} far={50} />\n      <hemisphereLight color={0xffffff} groundColor={0x444444} position={[0, 20, 0]} />\n      <directionalLight color={0xffffff} position={[-3, 10, -10]} castShadow\n        // shadow-camera-left={-2} shadow-camera-right={2} shadow-camera-top={2} shadow-camera-bottom={-2}\n        // shadow-camera-near={0.1} shadow-camera-far={40}\n      >\n        <orthographicCamera attach='shadow-camera' args={[-2, 2, 2, -2, 0.1, 40]} />\n      </directionalLight>\n      <Ground />\n      <Model />\n      <Controls />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["model","skeleton","mixer","idleWeight","walkWeight","runWeight","idleAction","walkAction","runAction","actions","singleStepMode","sizeOfNextStep","useGLTF","soldier","setWeight","action","weight","enabled","setEffectiveTimeScale","setEffectiveWeight","activateAllActions","settings","forEach","play","pauseAllActions","paused","unPauseAllActions","showModel","visibility","visible","showSkeleton","modifyTimeScale","speed","timeScale","prepareCrossFade","startAction","endAction","defaultDuration","duration","setCrossFadeDuration","executeCrossFade","synchronizeCrossFade","addEventListener","onLoopFinished","event","removeEventListener","time","crossFadeTo","stop","size","Model","scene","animations","AnimationMixer","clipAction","SkeletonHelper","useFrame","_","delta","getEffectiveWeight","mixerUpdateDelta","update","useEffect","traverse","obj","isMesh","castShadow","object","Ground","rotation","Math","PI","receiveShadow","args","color","depthWrite","Controls","useControls","value","onChange","button","get","max","min","step","camera","position","fov","near","far","dpr","shadows","onCreated","lookAt","attach","groundColor"],"sourceRoot":""}