{"version":3,"file":"static/js/83.bcdd660a.chunk.js","mappings":"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","sources":["webgl/animation_skinning_additive_blending/Example.tsx"],"sourcesContent":["import { useEffect } from \"react\"\nimport { AnimationAction, AnimationMixer, AnimationUtils, Group, SkeletonHelper } from \"three\"\nimport { Canvas, useFrame } from \"@react-three/fiber\"\nimport { OrbitControls, useGLTF } from \"@react-three/drei\"\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min\"\n\nuseGLTF.preload(\"/models/Xbot.glb\")\n\nlet model: Group, skeleton: SkeletonHelper, mixer: AnimationMixer\nconst crossFadeControls: any[] = []\nlet currentBaseAction = \"idle\"\nconst allActions: any = []\nconst baseActions = {\n  idle: { weight: 1 },\n  walk: { weight: 0 },\n  run: { weight: 0 }\n} as any\nconst additiveActions = {\n  sneak_pose: { weight: 0 },\n  sad_pose: { weight: 0 },\n  agree: { weight: 0 },\n  headShake: { weight: 0 }\n} as any\nlet panelSettings: any, numAnimations: number\n\n// This function is needed, since animationAction.crossFadeTo() disables its start action and sets\n// the start action's timeScale to ((start animation's duration) / (end animation's duration))\nconst setWeight = (action: AnimationAction, weight: number) => {\n  action.enabled = true\n  action.setEffectiveTimeScale(1)\n  action.setEffectiveWeight(weight)\n}\n\nconst activateAction = (action: AnimationAction) => {\n  const clip = action.getClip()\n  const settings = baseActions[clip.name] || additiveActions[clip.name]\n  setWeight(action, settings.weight)\n  action.play()\n}\n\nconst modifyTimeScale = (speed: number) => {\n  mixer.timeScale = speed\n}\n\nconst prepareCrossFade = (startAction: AnimationAction, endAction: AnimationAction, duration: number) => {\n  // If the current action is 'idle', execute the crossfade immediately;\n  // else wait until the current action has finished its current loop\n\n  if (currentBaseAction === \"idle\" || !startAction || !endAction) {\n    executeCrossFade( startAction, endAction, duration )\n  } else {\n    synchronizeCrossFade(startAction, endAction, duration)\n  }\n\n  // Update control colors\n  if (endAction) {\n    const clip = endAction.getClip()\n    currentBaseAction = clip.name\n  } else {\n    currentBaseAction = \"None\"\n  }\n\n  crossFadeControls.forEach((control) => {\n    const name = control.property\n    if (name === currentBaseAction) {\n      control.setActive()\n    } else {\n      control.setInactive()\n    }\n  })\n}\n\nconst synchronizeCrossFade = (startAction: AnimationAction, endAction: AnimationAction, duration: number) => {\n  const onLoopFinished = (event: any) => {\n    if (event.action === startAction) {\n      mixer.removeEventListener(\"loop\", onLoopFinished)\n      executeCrossFade(startAction, endAction, duration)\n    }\n  }\n\n  mixer.addEventListener(\"loop\", onLoopFinished)\n}\n\nconst executeCrossFade = (startAction: AnimationAction, endAction: AnimationAction, duration: number) => {\n  // Not only the start action, but also the end action must get a weight of 1 before fading\n  // (concerning the start action this is already guaranteed in this place)\n  if ( endAction ) {\n    setWeight(endAction, 1)\n    endAction.time = 0\n\n    if (startAction) {\n      // Crossfade with warping\n      startAction.crossFadeTo(endAction, duration, true)\n    } else {\n      // Fade in\n      endAction.fadeIn(duration)\n    }\n  } else {\n    // Fade out\n    startAction.fadeOut(duration)\n  }\n}\n\nconst Model = () => {\n  const { scene, animations } = useGLTF(\"/models/Xbot.glb\")\n\n  model = scene\n  mixer = new AnimationMixer(model)\n\n  numAnimations = animations.length\n  for (let i = 0; i !== numAnimations; ++i) {\n    let clip = animations[i]\n    const name = clip.name\n\n    if (baseActions[name]) {\n      const action = mixer.clipAction(clip)\n      activateAction(action)\n      baseActions[name].action = action\n      allActions.push(action)\n    } else if (additiveActions[name]) {\n      // Make the clip additive and remove the reference frame\n      AnimationUtils.makeClipAdditive(clip)\n      if (clip.name.endsWith(\"_pose\")) {\n        clip = AnimationUtils.subclip(clip, clip.name, 2, 3, 30)\n      }\n\n      const action = mixer.clipAction(clip)\n      activateAction(action)\n      additiveActions[name].action = action\n      allActions.push(action)\n    }\n  }\n\n  skeleton = new SkeletonHelper(scene)\n  skeleton.visible = false\n\n  useFrame((_, delta) => {\n    for (let i = 0; i !== numAnimations; ++i) {\n      const action = allActions[i]\n      const clip = action.getClip()\n      const settings = baseActions[clip.name] || additiveActions[clip.name]\n      settings.weight = action.getEffectiveWeight()\n    }\n\n    // Get the time elapsed since the last frame, used for mixer update (if not in single step mode)\n    let mixerUpdateDelta = delta\n    mixer.update(mixerUpdateDelta)\n  })\n\n  useEffect(() => {\n    scene.traverse((obj: any) => obj.isMesh && (obj.castShadow = true))\n  }, [scene])\n\n  return (\n    <>\n      <primitive object={scene} />\n      <primitive object={skeleton} />\n      <Controls />\n    </>\n  )\n}\n\nconst Controls = () => {\n  const panel = new GUI({ width: 310 })\n\n  useEffect(() => {\n    const folder1 = panel.addFolder(\"Base Actions\")\n    const folder2 = panel.addFolder(\"Additive Action Weights\")\n    const folder3 = panel.addFolder(\"General Speed\")\n\n    panelSettings = {\n      \"modify time scale\": 1.0\n    }\n\n    const baseNames = [\"None\", ...Object.keys(baseActions)]\n\n    for (let i = 0, l = baseNames.length; i !== l; ++i) {\n      const name = baseNames[i]\n      const settings = baseActions[name]\n      panelSettings[name] = () => {\n        const currentSettings = baseActions[currentBaseAction]\n        const currentAction = currentSettings ? currentSettings.action : null\n        const action = settings ? settings.action : null\n\n        prepareCrossFade( currentAction, action, 0.35 )\n      }\n\n      crossFadeControls.push(folder1.add(panelSettings, name))\n    }\n\n    for (const name of Object.keys( additiveActions)) {\n      const settings = additiveActions[name]\n\n      panelSettings[name] = settings.weight\n      folder2.add(panelSettings, name, 0.0, 1.0, 0.01).listen().onChange((weight: number) => {\n        setWeight(settings.action, weight)\n        settings.weight = weight\n      })\n    }\n\n    folder3.add( panelSettings, \"modify time scale\", 0.0, 1.5, 0.01 ).onChange(modifyTimeScale)\n\n    folder1.open()\n    folder2.open()\n    folder3.open()\n\n    crossFadeControls.forEach((control) => {\n      control.setInactive = () => {\n        control.domElement.classList.add(\"control-inactive\")\n      }\n\n      control.setActive = () => {\n        control.domElement.classList.remove(\"control-inactive\")\n      }\n\n      const settings = baseActions[control.property]\n\n      if (!settings || !settings.weight) {\n        control.setInactive()\n      }\n    });\n  })\n\n  return null\n}\n\nconst Ground = () => {\n  return (\n    <mesh rotation={[-Math.PI/2, 0, 0]} receiveShadow>\n      <planeGeometry args={[100, 100]} />\n      <meshPhongMaterial color={0x999999} depthWrite={false} />\n    </mesh>\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas \n      camera={{position: [-1, 2, 3], fov: 45, near: 1, far: 100}} \n      dpr={[1, 2]} \n      shadows\n    >\n      <color attach=\"background\" args={[0xa0a0a0]} />\n      <fog attach=\"fog\" color={0xa0a0a0} near={10} far={50} />\n      <hemisphereLight color={0xffffff} groundColor={0x444444} position={[0, 20, 0]} />\n      <directionalLight color={0xffffff} position={[3, 10, 10]} castShadow\n        shadow-camera-left={-2} shadow-camera-right={2} shadow-camera-top={2} shadow-camera-bottom={-2}\n        shadow-camera-near={0.1} shadow-camera-far={40}\n      />\n      <Ground />\n      <Model />\n      <OrbitControls enablePan={false} enableZoom={false} target={[0, 1, 0]} />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["model","skeleton","mixer","useGLTF","panelSettings","numAnimations","crossFadeControls","currentBaseAction","allActions","baseActions","idle","weight","walk","run","additiveActions","sneak_pose","sad_pose","agree","headShake","setWeight","action","enabled","setEffectiveTimeScale","setEffectiveWeight","activateAction","clip","getClip","settings","name","play","modifyTimeScale","speed","timeScale","synchronizeCrossFade","startAction","endAction","duration","addEventListener","onLoopFinished","event","removeEventListener","executeCrossFade","time","crossFadeTo","fadeIn","fadeOut","Model","scene","animations","AnimationMixer","length","i","clipAction","push","AnimationUtils","endsWith","SkeletonHelper","visible","useFrame","_","delta","getEffectiveWeight","mixerUpdateDelta","update","useEffect","traverse","obj","isMesh","castShadow","object","Controls","panel","GUI","width","folder1","addFolder","folder2","folder3","baseNames","Object","keys","l","currentSettings","forEach","control","property","setActive","setInactive","prepareCrossFade","add","listen","onChange","open","domElement","classList","remove","Ground","rotation","Math","PI","receiveShadow","args","color","depthWrite","camera","position","fov","near","far","dpr","shadows","attach","groundColor","enablePan","enableZoom","target"],"sourceRoot":""}