{"version":3,"file":"static/js/493.b026f6b6.chunk.js","mappings":"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","sources":["webgl/animation_skinning_morph/Example.tsx"],"sourcesContent":["import { AnimationClip, AnimationMixer, Group, LoopOnce } from \"three\"\nimport { Canvas, useFrame } from \"@react-three/fiber\"\nimport { useGLTF } from \"@react-three/drei\"\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min\"\nimport { useEffect } from \"react\"\n\nconst modelPath = `${process.env.PUBLIC_URL}/models/RobotExpressive.glb`\nuseGLTF.preload(modelPath)\n\nlet gui, mixer: AnimationMixer, actions: any, activeAction: any, previousAction: any\nlet model: Group, face: any\n\nconst api = { state: \"Walking\" } as any\n\nconst fadeToAction = (name: string, duration: number) => {\n  previousAction = activeAction\n  activeAction = actions[name]\n\n  if (previousAction !== activeAction) {\n    previousAction.fadeOut(duration)\n  }\n\n  activeAction\n    .reset()\n    .setEffectiveTimeScale(1)\n    .setEffectiveWeight(1)\n    .fadeIn(duration)\n    .play()\n}\n\nconst createControl = (model: Group, animations: AnimationClip[]) => {\n  const states = [\"Idle\", \"Walking\", \"Running\", \"Dance\", \"Death\", \"Sitting\", \"Standing\"]\n  const emotes = [\"Jump\", \"Yes\", \"No\", \"Wave\", \"Punch\", \"ThumbsUp\"]\n\n  gui = new GUI()\n\n  mixer = new AnimationMixer(model)\n\n  actions = {}\n\n  for (let i = 0; i < animations.length; i++) {\n    const clip = animations[i]\n    const action = mixer.clipAction(clip)\n    actions[clip.name] = action\n\n    if (emotes.indexOf(clip.name) >= 0 || states.indexOf(clip.name) >= 4) {\n      action.clampWhenFinished = true\n      action.loop = LoopOnce\n    }\n  }\n\n  // states\n  const statesFolder = gui.addFolder(\"States\")\n  const clipCtrl = statesFolder.add(api, \"state\").options(states)\n\n  clipCtrl.onChange(() => {\n    fadeToAction(api.state, 0.5)\n  })\n\n  statesFolder.open()\n\n  // emotes\n  const emoteFolder = gui.addFolder(\"Emotes\")\n\n  const createEmoteCallback = (name: string) => {\n    api[name] = () => {\n      fadeToAction(name, 0.2)\n      mixer.addEventListener(\"finished\", restoreState)\n    }\n\n    emoteFolder.add(api, name)\n  }\n\n  const restoreState = () => {\n    mixer.removeEventListener(\"finished\", restoreState)\n    fadeToAction(api.state, 0.2)\n  }\n\n  for (let i = 0; i < emotes.length; i++) {\n    createEmoteCallback(emotes[i])\n  }\n\n  emoteFolder.open()\n\n  // expressions\n  face = model.getObjectByName(\"Head_4\")\n\n  const expressions = Object.keys(face.morphTargetDictionary)\n  const expressionFolder = gui.addFolder(\"Expressions\")\n\n  for (let i = 0; i < expressions.length; i++) {\n    expressionFolder.add(face.morphTargetInfluences, i, 0, 1, 0.01).name(expressions[i])\n  }\n\n  activeAction = actions[\"Walking\"]\n  activeAction.play()\n\n  expressionFolder.open()\n}\n\nconst Model = () => {\n  const { scene, animations } = useGLTF(modelPath)\n  model = scene\n\n  useFrame((_, delta) => {\n    if (mixer) mixer.update(delta)\n  })\n\n  useEffect(() => {\n    createControl(model, animations)\n  }, [])\n\n  return (\n    <primitive object={scene} />\n )\n}\n\nconst Ground = () => {\n  return (\n    <>\n      <mesh rotation={[-Math.PI/2, 0, 0]}>\n        <planeGeometry args={[2000, 2000]} />\n        <meshPhongMaterial color={0x999999} depthWrite={false} />\n      </mesh>\n      <mesh>\n        <gridHelper args={[200, 40, 0x000000, 0x000000]} \n          material-opacity={0.2} material-transparent={true} />\n      </mesh>\n    </>\n )\n}\n\nconst Example = () => {\n  return (\n    <Canvas \n      camera={{position: [-5, 3, 10], fov: 45, near: 0.25, far: 100}} \n      dpr={[1, 2]} \n      onCreated={({ camera }) => camera.lookAt(0, 2, 0)}\n    >\n      <color attach=\"background\" args={[0xe0e0e0]} />\n      <fog attach=\"fog\" color={0xe0e0e0} near={20} far={100} />\n      <hemisphereLight color={0xffffff} groundColor={0x444444} position={[0, 20, 0]} />\n      <directionalLight color={0xffffff} position={[0, 20, 10]} />\n      <Ground />\n      <Model />\n    </Canvas>\n )\n}\n\nexport default Example"],"names":["gui","mixer","actions","activeAction","previousAction","model","face","modelPath","process","useGLTF","api","state","fadeToAction","name","duration","fadeOut","reset","setEffectiveTimeScale","setEffectiveWeight","fadeIn","play","Model","scene","animations","useFrame","_","delta","update","useEffect","states","emotes","GUI","AnimationMixer","i","length","clip","action","clipAction","indexOf","clampWhenFinished","loop","LoopOnce","statesFolder","addFolder","add","options","onChange","open","emoteFolder","createEmoteCallback","addEventListener","restoreState","removeEventListener","getObjectByName","expressions","Object","keys","morphTargetDictionary","expressionFolder","morphTargetInfluences","createControl","object","Ground","rotation","Math","PI","args","color","depthWrite","camera","position","fov","near","far","dpr","onCreated","lookAt","attach","groundColor"],"sourceRoot":""}