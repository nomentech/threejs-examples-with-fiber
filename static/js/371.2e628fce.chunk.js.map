{"version":3,"file":"static/js/371.2e628fce.chunk.js","mappings":"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","sources":["contants.tsx","../node_modules/three-stdlib/effects/PeppersGhostEffect.js","webgl/effects_peppersghost/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { PerspectiveCamera, Vector3, Quaternion } from 'three';\n\n/**\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\n */\n\nconst PeppersGhostEffect = function (renderer) {\n  const scope = this;\n  scope.cameraDistance = 15;\n  scope.reflectFromAbove = false; // Internals\n\n  let _halfWidth, _width, _height;\n\n  const _cameraF = new PerspectiveCamera(); //front\n\n\n  const _cameraB = new PerspectiveCamera(); //back\n\n\n  const _cameraL = new PerspectiveCamera(); //left\n\n\n  const _cameraR = new PerspectiveCamera(); //right\n\n\n  const _position = new Vector3();\n\n  const _quaternion = new Quaternion();\n\n  const _scale = new Vector3(); // Initialization\n\n\n  renderer.autoClear = false;\n\n  this.setSize = (width, height) => {\n    _halfWidth = width / 2;\n\n    if (width < height) {\n      _width = width / 3;\n      _height = width / 3;\n    } else {\n      _width = height / 3;\n      _height = height / 3;\n    }\n\n    renderer.setSize(width, height);\n  };\n\n  this.render = (scene, camera) => {\n    scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n    camera.matrixWorld.decompose(_position, _quaternion, _scale); // front\n\n    _cameraF.position.copy(_position);\n\n    _cameraF.quaternion.copy(_quaternion);\n\n    _cameraF.translateZ(scope.cameraDistance);\n\n    _cameraF.lookAt(scene.position); // back\n\n\n    _cameraB.position.copy(_position);\n\n    _cameraB.quaternion.copy(_quaternion);\n\n    _cameraB.translateZ(-scope.cameraDistance);\n\n    _cameraB.lookAt(scene.position);\n\n    _cameraB.rotation.z += 180 * (Math.PI / 180); // left\n\n    _cameraL.position.copy(_position);\n\n    _cameraL.quaternion.copy(_quaternion);\n\n    _cameraL.translateX(-scope.cameraDistance);\n\n    _cameraL.lookAt(scene.position);\n\n    _cameraL.rotation.x += 90 * (Math.PI / 180); // right\n\n    _cameraR.position.copy(_position);\n\n    _cameraR.quaternion.copy(_quaternion);\n\n    _cameraR.translateX(scope.cameraDistance);\n\n    _cameraR.lookAt(scene.position);\n\n    _cameraR.rotation.x += 90 * (Math.PI / 180);\n    renderer.clear();\n    renderer.setScissorTest(true);\n    renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraB);\n    } else {\n      renderer.render(scene, _cameraF);\n    }\n\n    renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraF);\n    } else {\n      renderer.render(scene, _cameraB);\n    }\n\n    renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraR);\n    } else {\n      renderer.render(scene, _cameraL);\n    }\n\n    renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n    renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraL);\n    } else {\n      renderer.render(scene, _cameraR);\n    }\n\n    renderer.setScissorTest(false);\n  };\n};\n\nexport { PeppersGhostEffect };\n","import { useEffect, useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { PeppersGhostEffect } from 'three-stdlib'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\n\nimport { aspect_ratio } from '../../contants'\n\nconst Cubes = () => {\n  const { geometry, material } = useMemo(() => {\n    const geometry = new THREE.BoxGeometry().toNonIndexed() // ensure unique vertices for each triangle\n    const position = geometry.attributes.position\n    const colors = []\n    const color = new THREE.Color()\n\n    // generate for each side of the cube a different color\n    for (let i=0; i<position.count; i+=6) {\n      color.setHex(Math.random() * 0xffffff)\n\n      // first face\n      colors.push(color.r, color.g, color.b)\n      colors.push(color.r, color.g, color.b)\n      colors.push(color.r, color.g, color.b)\n\n      // second face\n      colors.push(color.r, color.g, color.b)\n      colors.push(color.r, color.g, color.b)\n      colors.push(color.r, color.g, color.b)\n    }\n\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3))\n    const material = new THREE.MeshBasicMaterial({ vertexColors: true })\n\n    return { geometry, material }\n  }, [])\n\n  const cubes: any = useRef()\n  useFrame(() => {\n    cubes.current.rotation.y += 0.01\n  })\n\n  return (\n    <group ref={cubes}>\n      {[...Array(10)].map((_, i) => (\n        <mesh key={i} geometry={geometry} material={material} scale={Math.random()+0.5}\n          position={[Math.random()*2-1, Math.random()*2-1, Math.random()*2-1]}    \n        />\n      ))}\n    </group>\n  )\n}\n\n// const Effect = () => {\n//   const { gl, scene, camera, size } = useThree()\n//   const effect: any = useRef()\n\n//   useEffect(() => effect.current.setSize(size.width, size.height), [size])\n//   useFrame(() => effect.current.render(scene, camera), 2)\n\n//   return (\n//     <Effects ref={effect}>\n//       <peppersGhostEffect args={[gl]} cameraDistance={5} />\n//     </Effects>\n//   )\n// }\n\nconst Effect = () => {\n  const { gl, scene, camera, size } = useThree()\n\n  const effect = useMemo(() => {\n    const effect = new PeppersGhostEffect(gl)\n    return effect\n  }, [])\n\n  useEffect(() => {\n    effect.setSize(size.width, size.height)\n    effect.cameraDistance = 15\n  }, [size])\n\n  useFrame(() => { \n    effect.render(scene, camera)\n  }, 1)\n\n  return null\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{ fov: 60, aspect: aspect_ratio, near: 1, far: 100000 }}\n      // gl={{ pixelRatio: devicePixelRatio }}\n    >\n      <color attach='background' args={['black']} />\n      <Cubes />\n      <Effect />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","PeppersGhostEffect","renderer","_halfWidth","_width","_height","scope","this","cameraDistance","reflectFromAbove","_cameraF","PerspectiveCamera","_cameraB","_cameraL","_cameraR","_position","Vector3","_quaternion","Quaternion","_scale","autoClear","setSize","width","height","render","scene","camera","updateMatrixWorld","parent","matrixWorld","decompose","position","copy","quaternion","translateZ","lookAt","rotation","z","Math","PI","translateX","x","clear","setScissorTest","setScissor","setViewport","Cubes","useMemo","geometry","THREE","toNonIndexed","attributes","colors","color","i","count","setHex","random","push","r","g","b","setAttribute","material","vertexColors","cubes","useRef","useFrame","current","y","ref","Array","map","_","scale","Effect","useThree","gl","size","effect","useEffect","fov","aspect","near","far","attach","args"],"sourceRoot":""}