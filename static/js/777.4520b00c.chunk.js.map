{"version":3,"file":"static/js/777.4520b00c.chunk.js","mappings":"gOAAO,IAAMA,EAAeC,OAAOC,WAAa,IAAOD,OAAOC,WAAa,IAAOD,OAAOC,WAC5EC,EAAgBF,OAAOC,WAAa,IAAMD,OAAOG,YAAeH,OAAOG,YAAc,GAErFC,EAAeL,EAAeG,G,2FCIrCG,EAAS,WACb,OAAqCC,EAAAA,EAAAA,UAAQ,WAC3C,IAAMC,EAAoB,IAAIC,EAAAA,iBAAuB,CACnD,IAAIA,EAAAA,SAAe,IAAK,IAAK,IAC7B,IAAIA,EAAAA,SAAe,GAAI,GAAI,IAC3B,IAAIA,EAAAA,SAAe,GAAI,IAAK,IAC5B,IAAIA,EAAAA,QAAc,GAAI,IAAK,IAC3B,IAAIA,EAAAA,QAAc,IAAK,KAAM,MAG/BD,EAAaE,UAAY,aACzBF,EAAaG,QAAS,EAStB,IAPA,IAAMC,EAAmB,CACvBC,MAAO,IACPC,cAAc,EACdC,YAAaP,GAGTQ,EAAO,GACJC,EAAE,EAAGA,EADW,EACFA,IAAK,CAC1B,IACMC,EAAI,EAAED,EAHW,EAGHE,KAAKC,GACzBJ,EAAKK,KAAK,IAAIZ,EAAAA,QAFJ,GAEkBU,KAAKG,IAAIJ,GAF3B,GAEmCC,KAAKI,IAAIL,KAIxD,MAAO,CAAEM,OADM,IAAIf,EAAAA,MAAYO,GACdJ,iBAAAA,KAChB,IA3BKY,EAAR,EAAQA,OAAQZ,EAAhB,EAAgBA,iBA6BhB,GAAqCL,EAAAA,EAAAA,UAAQ,WAE3C,IADA,IAAMkB,EAAe,GACZR,EAAE,EAAGA,EAAE,GAAIA,IAClBQ,EAAaJ,KAAK,IAAIZ,EAAAA,QAAsB,IAAPQ,EAAE,KAASR,EAAAA,UAAAA,WAA2B,GAAI,IAAKA,EAAAA,UAAAA,WAA2B,GAAI,MAWrH,IARA,IACMiB,EAAmB,CACvBb,MAAO,IACPC,cAAc,EACdC,YAJmB,IAAIN,EAAAA,iBAAuBgB,IAO1CE,EAAO,GACJV,EAAE,EAAGA,EAAEW,GAAUX,IAAK,CAC7B,IAAMY,EAAIZ,EAAE,GAAK,EAAI,GAAK,GACpBC,EAAID,EAHc,EAGDE,KAAKC,GAC5BO,EAAKN,KAAK,IAAIZ,EAAAA,QAAcU,KAAKG,IAAIJ,GAAGW,EAAGV,KAAKI,IAAIL,GAAGW,IAGzD,MAAO,CAAEC,OADM,IAAIrB,EAAAA,MAAYkB,GACdD,iBAAAA,KAChB,IArBKI,EAAR,EAAQA,OAAQJ,EAAhB,EAAgBA,iBAgChB,OACE,iCACE,6BACE,4BAAiBK,KAAM,CAACP,EAAQZ,MAChC,gCAAqBoB,MAAM,UAAUC,WAAW,QAElD,6BACE,4BAAiBF,KAAM,CAACD,EAAQJ,MAChC,gCAAqBM,MAAM,UAAUC,WAAW,QAElD,kBAAMC,SAAU,CAAC,GAAI,IAAK,IAA1B,WACE,4BAAiBH,KAAM,CAACD,EApBL,CACvBK,MAAO,GACPtB,MAAO,EACPC,cAAc,EACdsB,eAAgB,EAChBC,UAAW,EACXC,cAAe,OAeX,gCAAqBN,MAAM,aAC3B,gCAAqBA,MAAM,mBAkBnC,UAZgB,WACd,OACE,UAAC,KAAD,CAAQO,OAAQ,CAAEL,SAAU,CAAC,EAAG,EAAG,KAAMM,IAAK,GAAIC,OAAQpC,EAAAA,GAAcqC,KAAM,EAAGC,IAAK,KAAtF,WACE,kBAAOC,OAAO,aAAab,KAAM,CAAC,YAClC,yBAAcA,KAAM,CAAC,YACrB,uBAAYA,KAAM,CAAC,UAAWG,SAAU,CAAC,EAAG,EAAG,QAC/C,SAAC5B,EAAD,KACA,SAAC,IAAD,CAAmBuC,YAAa,IAAKC,YAAa","sources":["contants.tsx","webgl/geometry_extrude_shapes/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { useMemo } from 'react'\nimport * as THREE from 'three'\nimport { Canvas } from '@react-three/fiber'\nimport { TrackballControls } from '@react-three/drei'\n\nimport { aspect_ratio } from '../../contants'\n\nconst Meshes = () => {\n  const { shape1, extrudeSettings1 } = useMemo(() => {\n    const closedSpline: any = new THREE.CatmullRomCurve3([\n      new THREE.Vector3(-60, -100, 60),\n      new THREE.Vector3(-60, 20, 60),\n      new THREE.Vector3(-60, 120, 60),\n      new THREE.Vector3(60, 20, -60),\n      new THREE.Vector3(60, -100, -60)\n    ])\n  \n    closedSpline.curveType = 'catmullrom'\n    closedSpline.closed = true\n\n    const extrudeSettings1 = {\n      steps: 100,\n      bevelEnabled: false,\n      extrudePath: closedSpline\n    }\n\n    const pts1 = [], count = 3\n    for (let i=0; i<count; i++) {\n      const l = 20\n      const a = 2*i/count*Math.PI\n      pts1.push(new THREE.Vector2(Math.cos(a) * l, Math.sin(a) * l))\n    }\n\n    const shape1 = new THREE.Shape(pts1)\n    return { shape1, extrudeSettings1 }\n  }, [])\n\n  const { shape2, extrudeSettings2 } = useMemo(() => {\n    const randomPoints = []\n    for (let i=0; i<10; i++) {\n      randomPoints.push(new THREE.Vector3((i-4.5)*50, THREE.MathUtils.randFloat(-50, 50), THREE.MathUtils.randFloat(-50, 50)))\n    }\n\n    const randomSpline = new THREE.CatmullRomCurve3(randomPoints)\n    const extrudeSettings2 = {\n      steps: 200,\n      bevelEnabled: false,\n      extrudePath: randomSpline\n    }\n\n    const pts2 = [], numPts = 5\n    for (let i=0; i<numPts*2; i++) {\n      const l = i%2 == 1 ? 10 : 20\n      const a = i / numPts * Math.PI\n      pts2.push(new THREE.Vector2(Math.cos(a)*l, Math.sin(a)*l))\n    }\n    const shape2 = new THREE.Shape(pts2)\n    return { shape2, extrudeSettings2 }\n  }, [])\n\n  const extrudeSettings3 = {\n    depth: 20,\n    steps: 1,\n    bevelEnabled: true,\n    bevelThickness: 2,\n    bevelSize: 4,\n    bevelSegments: 1\n  }\n\n  return (\n    <>\n      <mesh>\n        <extrudeGeometry args={[shape1, extrudeSettings1]} />\n        <meshLambertMaterial color='#b00000' wireframe={false} />\n      </mesh>\n      <mesh>\n        <extrudeGeometry args={[shape2, extrudeSettings2]} />\n        <meshLambertMaterial color='#ff8000' wireframe={false} />\n      </mesh>\n      <mesh position={[50, 100, 50]} >\n        <extrudeGeometry args={[shape2, extrudeSettings3]} />\n        <meshLambertMaterial color='#b00000' />\n        <meshLambertMaterial color='#ff8000' />\n      </mesh>\n    </>\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{ position: [0, 0, 500], fov: 45, aspect: aspect_ratio, near: 1, far: 1000}}>\n      <color attach='background' args={[0x222222]} />\n      <ambientLight args={[0x222222]} />\n      <pointLight args={[0xffffff]} position={[0, 0, 500]} />\n      <Meshes />\n      <TrackballControls minDistance={200} maxDistance={500} />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","Meshes","useMemo","closedSpline","THREE","curveType","closed","extrudeSettings1","steps","bevelEnabled","extrudePath","pts1","i","a","Math","PI","push","cos","sin","shape1","randomPoints","extrudeSettings2","pts2","numPts","l","shape2","args","color","wireframe","position","depth","bevelThickness","bevelSize","bevelSegments","camera","fov","aspect","near","far","attach","minDistance","maxDistance"],"sourceRoot":""}