{"version":3,"file":"static/js/949.3f33ccbe.chunk.js","mappings":"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","sources":["contants.tsx","../node_modules/three-stdlib/shaders/BokehShader2.js","../node_modules/three-stdlib/cameras/CinematicCamera.js","webgl/camera_cinematic/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { Vector2 } from 'three';\n\n/**\n * Depth-of-field shader with bokeh\n * ported from GLSL shader by Martins Upitis\n * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\n *\n * Requires #define RINGS and SAMPLES integers\n */\n\nconst BokehShader2 = {\n  uniforms: {\n    textureWidth: {\n      value: 1.0\n    },\n    textureHeight: {\n      value: 1.0\n    },\n    focalDepth: {\n      value: 1.0\n    },\n    focalLength: {\n      value: 24.0\n    },\n    fstop: {\n      value: 0.9\n    },\n    tColor: {\n      value: null\n    },\n    tDepth: {\n      value: null\n    },\n    maxblur: {\n      value: 1.0\n    },\n    showFocus: {\n      value: 0\n    },\n    manualdof: {\n      value: 0\n    },\n    vignetting: {\n      value: 0\n    },\n    depthblur: {\n      value: 0\n    },\n    threshold: {\n      value: 0.5\n    },\n    gain: {\n      value: 2.0\n    },\n    bias: {\n      value: 0.5\n    },\n    fringe: {\n      value: 0.7\n    },\n    znear: {\n      value: 0.1\n    },\n    zfar: {\n      value: 100\n    },\n    noise: {\n      value: 1\n    },\n    dithering: {\n      value: 0.0001\n    },\n    pentagon: {\n      value: 0\n    },\n    shaderFocus: {\n      value: 1\n    },\n    focusCoords: {\n      value: new Vector2()\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', 'varying vec2 vUv;', 'uniform sampler2D tColor;', 'uniform sampler2D tDepth;', 'uniform float textureWidth;', 'uniform float textureHeight;', 'uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below', 'uniform float focalLength; //focal length in mm', 'uniform float fstop; //f-stop value', 'uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)', '/*', 'make sure that these two values are the same for your camera, otherwise distances will be wrong.', '*/', 'uniform float znear; // camera clipping start', 'uniform float zfar; // camera clipping end', '//------------------------------------------', '//user variables', 'const int samples = SAMPLES; //samples on the first ring', 'const int rings = RINGS; //ring count', 'const int maxringsamples = rings * samples;', 'uniform bool manualdof; // manual dof calculation', 'float ndofstart = 1.0; // near dof blur start', 'float ndofdist = 2.0; // near dof blur falloff distance', 'float fdofstart = 1.0; // far dof blur start', 'float fdofdist = 3.0; // far dof blur falloff distance', 'float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)', 'uniform bool vignetting; // use optical lens vignetting', 'float vignout = 1.3; // vignetting outer border', 'float vignin = 0.0; // vignetting inner border', 'float vignfade = 22.0; // f-stops till vignete fades', 'uniform bool shaderFocus;', '// disable if you use external focalDepth value', 'uniform vec2 focusCoords;', '// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)', '// if center of screen use vec2(0.5, 0.5);', 'uniform float maxblur;', '//clamp value of max blur (0.0 = no blur, 1.0 default)', 'uniform float threshold; // highlight threshold;', 'uniform float gain; // highlight gain;', 'uniform float bias; // bokeh edge bias', 'uniform float fringe; // bokeh chromatic aberration / fringing', 'uniform bool noise; //use noise instead of pattern for sample dithering', 'uniform float dithering;', 'uniform bool depthblur; // blur the depth buffer', 'float dbsize = 1.25; // depth blur size', '/*', 'next part is experimental', 'not looking good with small sample and ring count', 'looks okay starting from samples = 4, rings = 4', '*/', 'uniform bool pentagon; //use pentagon as bokeh shape?', 'float feather = 0.4; //pentagon shape feather', '//------------------------------------------', 'float penta(vec2 coords) {', '\t//pentagonal shape', '\tfloat scale = float(rings) - 1.3;', '\tvec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);', '\tvec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);', '\tvec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);', '\tvec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);', '\tvec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);', '\tvec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);', '\tvec4  one = vec4( 1.0 );', '\tvec4 P = vec4((coords),vec2(scale, scale));', '\tvec4 dist = vec4(0.0);', '\tfloat inorout = -4.0;', '\tdist.x = dot( P, HS0 );', '\tdist.y = dot( P, HS1 );', '\tdist.z = dot( P, HS2 );', '\tdist.w = dot( P, HS3 );', '\tdist = smoothstep( -feather, feather, dist );', '\tinorout += dot( dist, one );', '\tdist.x = dot( P, HS4 );', '\tdist.y = HS5.w - abs( P.z );', '\tdist = smoothstep( -feather, feather, dist );', '\tinorout += dist.x;', '\treturn clamp( inorout, 0.0, 1.0 );', '}', 'float bdepth(vec2 coords) {', '\t// Depth buffer blur', '\tfloat d = 0.0;', '\tfloat kernel[9];', '\tvec2 offset[9];', '\tvec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;', '\toffset[0] = vec2(-wh.x,-wh.y);', '\toffset[1] = vec2( 0.0, -wh.y);', '\toffset[2] = vec2( wh.x -wh.y);', '\toffset[3] = vec2(-wh.x,  0.0);', '\toffset[4] = vec2( 0.0,   0.0);', '\toffset[5] = vec2( wh.x,  0.0);', '\toffset[6] = vec2(-wh.x, wh.y);', '\toffset[7] = vec2( 0.0,  wh.y);', '\toffset[8] = vec2( wh.x, wh.y);', '\tkernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;', '\tkernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;', '\tkernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;', '\tfor( int i=0; i<9; i++ ) {', '\t\tfloat tmp = texture2D(tDepth, coords + offset[i]).r;', '\t\td += tmp * kernel[i];', '\t}', '\treturn d;', '}', 'vec3 color(vec2 coords,float blur) {', '\t//processing the sample', '\tvec3 col = vec3(0.0);', '\tvec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);', '\tcol.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;', '\tcol.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;', '\tcol.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;', '\tvec3 lumcoeff = vec3(0.299,0.587,0.114);', '\tfloat lum = dot(col.rgb, lumcoeff);', '\tfloat thresh = max((lum-threshold)*gain, 0.0);', '\treturn col+mix(vec3(0.0),col,thresh*blur);', '}', 'vec3 debugFocus(vec3 col, float blur, float depth) {', '\tfloat edge = 0.002*depth; //distance based edge smoothing', '\tfloat m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);', '\tfloat e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);', '\tcol = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);', '\tcol = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);', '\treturn col;', '}', 'float linearize(float depth) {', '\treturn -zfar * znear / (depth * (zfar - znear) - zfar);', '}', 'float vignette() {', '\tfloat dist = distance(vUv.xy, vec2(0.5,0.5));', '\tdist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);', '\treturn clamp(dist,0.0,1.0);', '}', 'float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {', '\tfloat rings2 = float(rings);', '\tfloat step = PI*2.0 / float(ringsamples);', '\tfloat pw = cos(j*step)*i;', '\tfloat ph = sin(j*step)*i;', '\tfloat p = 1.0;', '\tif (pentagon) {', '\t\tp = penta(vec2(pw,ph));', '\t}', '\tcol += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;', '\treturn 1.0 * mix(1.0, i /rings2, bias) * p;', '}', 'void main() {', '\t//scene depth calculation', '\tfloat depth = linearize(texture2D(tDepth,vUv.xy).x);', '\t// Blur depth?', '\tif ( depthblur ) {', '\t\tdepth = linearize(bdepth(vUv.xy));', '\t}', '\t//focal plane calculation', '\tfloat fDepth = focalDepth;', '\tif (shaderFocus) {', '\t\tfDepth = linearize(texture2D(tDepth,focusCoords).x);', '\t}', '\t// dof blur factor calculation', '\tfloat blur = 0.0;', '\tif (manualdof) {', '\t\tfloat a = depth-fDepth; // Focal plane', '\t\tfloat b = (a-fdofstart)/fdofdist; // Far DoF', '\t\tfloat c = (-a-ndofstart)/ndofdist; // Near Dof', '\t\tblur = (a>0.0) ? b : c;', '\t} else {', '\t\tfloat f = focalLength; // focal length in mm', '\t\tfloat d = fDepth*1000.0; // focal plane in mm', '\t\tfloat o = depth*1000.0; // depth in mm', '\t\tfloat a = (o*f)/(o-f);', '\t\tfloat b = (d*f)/(d-f);', '\t\tfloat c = (d-f)/(d*fstop*CoC);', '\t\tblur = abs(a-b)*c;', '\t}', '\tblur = clamp(blur,0.0,1.0);', '\t// calculation of pattern for dithering', '\tvec2 noise = vec2(rand(vUv.xy), rand( vUv.xy + vec2( 0.4, 0.6 ) ) )*dithering*blur;', '\t// getting blur x and y step factor', '\tfloat w = (1.0/textureWidth)*blur*maxblur+noise.x;', '\tfloat h = (1.0/textureHeight)*blur*maxblur+noise.y;', '\t// calculation of final color', '\tvec3 col = vec3(0.0);', '\tif(blur < 0.05) {', '\t\t//some optimization thingy', '\t\tcol = texture2D(tColor, vUv.xy).rgb;', '\t} else {', '\t\tcol = texture2D(tColor, vUv.xy).rgb;', '\t\tfloat s = 1.0;', '\t\tint ringsamples;', '\t\tfor (int i = 1; i <= rings; i++) {', '\t\t\t/*unboxstart*/', '\t\t\tringsamples = i * samples;', '\t\t\tfor (int j = 0 ; j < maxringsamples ; j++) {', '\t\t\t\tif (j >= ringsamples) break;', '\t\t\t\ts += gather(float(i), float(j), ringsamples, col, w, h, blur);', '\t\t\t}', '\t\t\t/*unboxend*/', '\t\t}', '\t\tcol /= s; //divide by sample count', '\t}', '\tif (showFocus) {', '\t\tcol = debugFocus(col, blur, depth);', '\t}', '\tif (vignetting) {', '\t\tcol *= vignette();', '\t}', '\tgl_FragColor.rgb = col;', '\tgl_FragColor.a = 1.0;', '} '].join('\\n')\n};\nconst BokehDepthShader = {\n  uniforms: {\n    mNear: {\n      value: 1.0\n    },\n    mFar: {\n      value: 1000.0\n    }\n  },\n  vertexShader: ['varying float vViewZDepth;', 'void main() {', '\t#include <begin_vertex>', '\t#include <project_vertex>', '\tvViewZDepth = - mvPosition.z;', '}'].join('\\n'),\n  fragmentShader: ['uniform float mNear;', 'uniform float mFar;', 'varying float vViewZDepth;', 'void main() {', '\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );', '\tgl_FragColor = vec4( vec3( color ), 1.0 );', '} '].join('\\n')\n};\n\nexport { BokehDepthShader, BokehShader2 };\n","import { PerspectiveCamera, ShaderMaterial, Scene, OrthographicCamera, WebGLRenderTarget, UniformsUtils, Mesh, PlaneGeometry } from 'three';\nimport { BokehDepthShader, BokehShader2 } from '../shaders/BokehShader2.js';\n\nclass CinematicCamera extends PerspectiveCamera {\n  constructor(fov, aspect, near, far) {\n    super(fov, aspect, near, far);\n    this.type = 'CinematicCamera';\n    this.postprocessing = {\n      enabled: true\n    };\n    this.shaderSettings = {\n      rings: 3,\n      samples: 4\n    };\n    const depthShader = BokehDepthShader;\n    this.materialDepth = new ShaderMaterial({\n      uniforms: depthShader.uniforms,\n      vertexShader: depthShader.vertexShader,\n      fragmentShader: depthShader.fragmentShader\n    });\n    this.materialDepth.uniforms['mNear'].value = near;\n    this.materialDepth.uniforms['mFar'].value = far; // In case of cinematicCamera, having a default lens set is important\n\n    this.setLens();\n    this.initPostProcessing();\n  } // providing fnumber and coc(Circle of Confusion) as extra arguments\n\n\n  setLens(focalLength, filmGauge, fNumber, coc) {\n    // In case of cinematicCamera, having a default lens set is important\n    if (focalLength === undefined) focalLength = 35;\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength); // if fnumber and coc are not provided, cinematicCamera tries to act as a basic PerspectiveCamera\n\n    if (fNumber === undefined) fNumber = 8;\n    if (coc === undefined) coc = 0.019;\n    this.fNumber = fNumber;\n    this.coc = coc; // fNumber is focalLength by aperture\n\n    this.aperture = focalLength / this.fNumber; // hyperFocal is required to calculate depthOfField when a lens tries to focus at a distance with given fNumber and focalLength\n\n    this.hyperFocal = focalLength * focalLength / (this.aperture * this.coc);\n  }\n\n  linearize(depth) {\n    const zfar = this.far;\n    const znear = this.near;\n    return -zfar * znear / (depth * (zfar - znear) - zfar);\n  }\n\n  smoothstep(near, far, depth) {\n    const x = this.saturate((depth - near) / (far - near));\n    return x * x * (3 - 2 * x);\n  }\n\n  saturate(x) {\n    return Math.max(0, Math.min(1, x));\n  } // function for focusing at a distance from the camera\n\n\n  focusAt(focusDistance) {\n    if (focusDistance === undefined) focusDistance = 20;\n    const focalLength = this.getFocalLength(); // distance from the camera (normal to frustrum) to focus on\n\n    this.focus = focusDistance; // the nearest point from the camera which is in focus (unused)\n\n    this.nearPoint = this.hyperFocal * this.focus / (this.hyperFocal + (this.focus - focalLength)); // the farthest point from the camera which is in focus (unused)\n\n    this.farPoint = this.hyperFocal * this.focus / (this.hyperFocal - (this.focus - focalLength)); // the gap or width of the space in which is everything is in focus (unused)\n\n    this.depthOfField = this.farPoint - this.nearPoint; // Considering minimum distance of focus for a standard lens (unused)\n\n    if (this.depthOfField < 0) this.depthOfField = 0;\n    this.sdistance = this.smoothstep(this.near, this.far, this.focus);\n    this.ldistance = this.linearize(1 - this.sdistance);\n    this.postprocessing.bokeh_uniforms['focalDepth'].value = this.ldistance;\n  }\n\n  initPostProcessing() {\n    if (this.postprocessing.enabled) {\n      this.postprocessing.scene = new Scene();\n      this.postprocessing.camera = new OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -10000, 10000);\n      this.postprocessing.scene.add(this.postprocessing.camera);\n      this.postprocessing.rtTextureDepth = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.postprocessing.rtTextureColor = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      const bokeh_shader = BokehShader2;\n      this.postprocessing.bokeh_uniforms = UniformsUtils.clone(bokeh_shader.uniforms);\n      this.postprocessing.bokeh_uniforms['tColor'].value = this.postprocessing.rtTextureColor.texture;\n      this.postprocessing.bokeh_uniforms['tDepth'].value = this.postprocessing.rtTextureDepth.texture;\n      this.postprocessing.bokeh_uniforms['manualdof'].value = 0;\n      this.postprocessing.bokeh_uniforms['shaderFocus'].value = 0;\n      this.postprocessing.bokeh_uniforms['fstop'].value = 2.8;\n      this.postprocessing.bokeh_uniforms['showFocus'].value = 1;\n      this.postprocessing.bokeh_uniforms['focalDepth'].value = 0.1; //console.log( this.postprocessing.bokeh_uniforms[ \"focalDepth\" ].value );\n\n      this.postprocessing.bokeh_uniforms['znear'].value = this.near;\n      this.postprocessing.bokeh_uniforms['zfar'].value = this.near;\n      this.postprocessing.bokeh_uniforms['textureWidth'].value = window.innerWidth;\n      this.postprocessing.bokeh_uniforms['textureHeight'].value = window.innerHeight;\n      this.postprocessing.materialBokeh = new ShaderMaterial({\n        uniforms: this.postprocessing.bokeh_uniforms,\n        vertexShader: bokeh_shader.vertexShader,\n        fragmentShader: bokeh_shader.fragmentShader,\n        defines: {\n          RINGS: this.shaderSettings.rings,\n          SAMPLES: this.shaderSettings.samples,\n          DEPTH_PACKING: 1\n        }\n      });\n      this.postprocessing.quad = new Mesh(new PlaneGeometry(window.innerWidth, window.innerHeight), this.postprocessing.materialBokeh);\n      this.postprocessing.quad.position.z = -500;\n      this.postprocessing.scene.add(this.postprocessing.quad);\n    }\n  }\n\n  renderCinematic(scene, renderer) {\n    if (this.postprocessing.enabled) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      renderer.clear(); // Render scene into texture\n\n      scene.overrideMaterial = null;\n      renderer.setRenderTarget(this.postprocessing.rtTextureColor);\n      renderer.clear();\n      renderer.render(scene, this); // Render depth into texture\n\n      scene.overrideMaterial = this.materialDepth;\n      renderer.setRenderTarget(this.postprocessing.rtTextureDepth);\n      renderer.clear();\n      renderer.render(scene, this); // Render bokeh composite\n\n      renderer.setRenderTarget(null);\n      renderer.render(this.postprocessing.scene, this.postprocessing.camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    }\n  }\n\n}\n\nexport { CinematicCamera };\n","import { MathUtils } from 'three'\nimport { Canvas, extend, Object3DNode, useFrame } from '@react-three/fiber'\nimport { CinematicCamera } from 'three-stdlib'\n\nimport { aspect_ratio } from '../../contants'\n\nextend({ CinematicCamera })\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      cinematicCamera: Object3DNode<any, typeof CinematicCamera>\n    }\n  }\n}\n\nlet theta = 0\nconst radius = 100\n\nconst Camera = (props: any) => {\n  useFrame(({ scene, camera }) => {\n    theta += 0.1\n\n    camera.position.x = radius * Math.sin(MathUtils.degToRad(theta))\n    camera.position.y = radius * Math.sin(MathUtils.degToRad(theta))\n    camera.position.z = radius * Math.cos(MathUtils.degToRad(theta))\n    camera.lookAt(scene.position)\n    camera.updateMatrixWorld()\n  })\n\n  return (\n    <cinematicCamera {...props} args={[60, aspect_ratio, 1, 1000]} position={[2, 1, 500]} lens={5} />\n  )\n}\n\nconst Mesh = () => {\n  const count = 1500\n  let currentHex: any\n\n  const pointOverHandler = (event: any) => {\n    currentHex = event.object.material.emissive.getHex()\n    event.object.material.emissive.setHex(0xff0000)\n  }\n\n  const pointOutHandler = (event: any) => {\n    event.object.material.emissive.setHex(currentHex)\n  }\n\n  return (\n    <>    \n      {[...Array(count)].map((_, i) => (\n        <mesh key={i}\n          position={[Math.random() * 800 - 400, Math.random() * 800 - 400, Math.random() * 800 - 400]}\n          onPointerOver={pointOverHandler} onPointerOut={pointOutHandler} >\n          <boxGeometry args={[20, 20, 20]} />\n          <meshLambertMaterial color={Math.random() * 0xffffff} />\n        </mesh>\n      ))}\n    </>\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas>\n      <Camera attach='camera' />\n      <color attach='background' args={[0xf0f0f0]}/>\n      <ambientLight args={[0xffffff, 0.3]} />\n      <directionalLight position={[1, 1, 1]} args={[0xffffff, 0.35]} />\n      <Mesh />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","BokehShader2","uniforms","textureWidth","value","textureHeight","focalDepth","focalLength","fstop","tColor","tDepth","maxblur","showFocus","manualdof","vignetting","depthblur","threshold","gain","bias","fringe","znear","zfar","noise","dithering","pentagon","shaderFocus","focusCoords","Vector2","vertexShader","join","fragmentShader","BokehDepthShader","mNear","mFar","CinematicCamera","fov","aspect","near","far","type","postprocessing","enabled","shaderSettings","rings","samples","depthShader","materialDepth","ShaderMaterial","setLens","initPostProcessing","filmGauge","fNumber","coc","undefined","this","setFocalLength","aperture","hyperFocal","depth","x","saturate","Math","max","min","focusDistance","getFocalLength","focus","nearPoint","farPoint","depthOfField","sdistance","smoothstep","ldistance","linearize","bokeh_uniforms","scene","Scene","camera","OrthographicCamera","add","rtTextureDepth","WebGLRenderTarget","rtTextureColor","bokeh_shader","UniformsUtils","texture","materialBokeh","defines","RINGS","SAMPLES","DEPTH_PACKING","quad","Mesh","PlaneGeometry","position","z","renderer","currentRenderTarget","getRenderTarget","clear","overrideMaterial","setRenderTarget","render","PerspectiveCamera","extend","theta","Camera","props","useFrame","sin","MathUtils","y","cos","lookAt","updateMatrixWorld","args","lens","currentHex","pointOverHandler","event","object","material","emissive","getHex","setHex","pointOutHandler","Array","map","_","i","random","onPointerOver","onPointerOut","color","attach"],"sourceRoot":""}