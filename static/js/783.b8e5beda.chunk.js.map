{"version":3,"file":"static/js/783.b8e5beda.chunk.js","mappings":"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","sources":["contants.tsx","../node_modules/three/examples/jsm/math/ConvexHull.js","../node_modules/three/examples/jsm/geometries/ConvexGeometry.js","webgl/geometry_convex/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import {\n\tLine3,\n\tPlane,\n\tTriangle,\n\tVector3\n} from 'three';\n\n/**\n * Ported from: https://github.com/maurizzzio/quickhull3d/ by Mauricio Poppe (https://github.com/maurizzzio)\n */\n\nconst Visible = 0;\nconst Deleted = 1;\n\nconst _v1 = new Vector3();\nconst _line3 = new Line3();\nconst _plane = new Plane();\nconst _closestPoint = new Vector3();\nconst _triangle = new Triangle();\n\nclass ConvexHull {\n\n\tconstructor() {\n\n\t\tthis.tolerance = - 1;\n\n\t\tthis.faces = []; // the generated faces of the convex hull\n\t\tthis.newFaces = []; // this array holds the faces that are generated within a single iteration\n\n\t\t// the vertex lists work as follows:\n\t\t//\n\t\t// let 'a' and 'b' be 'Face' instances\n\t\t// let 'v' be points wrapped as instance of 'Vertex'\n\t\t//\n\t\t//     [v, v, ..., v, v, v, ...]\n\t\t//      ^             ^\n\t\t//      |             |\n\t\t//  a.outside     b.outside\n\t\t//\n\t\tthis.assigned = new VertexList();\n\t\tthis.unassigned = new VertexList();\n\n\t\tthis.vertices = []; \t// vertices of the hull (internal representation of given geometry data)\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\t// The algorithm needs at least four points.\n\n\t\tif ( points.length >= 4 ) {\n\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\t\tthis.vertices.push( new VertexNode( points[ i ] ) );\n\n\t\t\t}\n\n\t\t\tthis.compute();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tconst points = [];\n\n\t\tobject.updateMatrixWorld( true );\n\n\t\tobject.traverse( function ( node ) {\n\n\t\t\tconst geometry = node.geometry;\n\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tif ( geometry.isGeometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.ConvexHull no longer supports Geometry. Use THREE.BufferGeometry instead.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t} else if ( geometry.isBufferGeometry ) {\n\n\t\t\t\t\tconst attribute = geometry.attributes.position;\n\n\t\t\t\t\tif ( attribute !== undefined ) {\n\n\t\t\t\t\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst point = new Vector3();\n\n\t\t\t\t\t\t\tpoint.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );\n\n\t\t\t\t\t\t\tpoints.push( point );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this.setFromPoints( points );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst faces = this.faces;\n\n\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tconst face = faces[ i ];\n\n\t\t\t// compute signed distance and check on what half space the point lies\n\n\t\t\tif ( face.distanceToPoint( point ) > this.tolerance ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectRay( ray, target ) {\n\n\t\t// based on \"Fast Ray-Convex Polyhedron Intersection\"  by Eric Haines, GRAPHICS GEMS II\n\n\t\tconst faces = this.faces;\n\n\t\tlet tNear = - Infinity;\n\t\tlet tFar = Infinity;\n\n\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\tconst face = faces[ i ];\n\n\t\t\t// interpret faces as planes for the further computation\n\n\t\t\tconst vN = face.distanceToPoint( ray.origin );\n\t\t\tconst vD = face.normal.dot( ray.direction );\n\n\t\t\t// if the origin is on the positive side of a plane (so the plane can \"see\" the origin) and\n\t\t\t// the ray is turned away or parallel to the plane, there is no intersection\n\n\t\t\tif ( vN > 0 && vD >= 0 ) return null;\n\n\t\t\t// compute the distance from the ray’s origin to the intersection with the plane\n\n\t\t\tconst t = ( vD !== 0 ) ? ( - vN / vD ) : 0;\n\n\t\t\t// only proceed if the distance is positive. a negative distance means the intersection point\n\t\t\t// lies \"behind\" the origin\n\n\t\t\tif ( t <= 0 ) continue;\n\n\t\t\t// now categorized plane as front-facing or back-facing\n\n\t\t\tif ( vD > 0 ) {\n\n\t\t\t\t//  plane faces away from the ray, so this plane is a back-face\n\n\t\t\t\ttFar = Math.min( t, tFar );\n\n\t\t\t} else {\n\n\t\t\t\t// front-face\n\n\t\t\t\ttNear = Math.max( t, tNear );\n\n\t\t\t}\n\n\t\t\tif ( tNear > tFar ) {\n\n\t\t\t\t// if tNear ever is greater than tFar, the ray must miss the convex hull\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// evaluate intersection point\n\n\t\t// always try tNear first since its the closer intersection point\n\n\t\tif ( tNear !== - Infinity ) {\n\n\t\t\tray.at( tNear, target );\n\n\t\t} else {\n\n\t\t\tray.at( tFar, target );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tintersectsRay( ray ) {\n\n\t\treturn this.intersectRay( ray, _v1 ) !== null;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.faces = [];\n\t\tthis.vertices = [];\n\n\t\treturn this;\n\n\t}\n\n\t// Adds a vertex to the 'assigned' list of vertices and assigns it to the given face\n\n\taddVertexToFace( vertex, face ) {\n\n\t\tvertex.face = face;\n\n\t\tif ( face.outside === null ) {\n\n\t\t\tthis.assigned.append( vertex );\n\n\t\t} else {\n\n\t\t\tthis.assigned.insertBefore( face.outside, vertex );\n\n\t\t}\n\n\t\tface.outside = vertex;\n\n\t\treturn this;\n\n\t}\n\n\t// Removes a vertex from the 'assigned' list of vertices and from the given face\n\n\tremoveVertexFromFace( vertex, face ) {\n\n\t\tif ( vertex === face.outside ) {\n\n\t\t\t// fix face.outside link\n\n\t\t\tif ( vertex.next !== null && vertex.next.face === face ) {\n\n\t\t\t\t// face has at least 2 outside vertices, move the 'outside' reference\n\n\t\t\t\tface.outside = vertex.next;\n\n\t\t\t} else {\n\n\t\t\t\t// vertex was the only outside vertex that face had\n\n\t\t\t\tface.outside = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.assigned.remove( vertex );\n\n\t\treturn this;\n\n\t}\n\n\t// Removes all the visible vertices that a given face is able to see which are stored in the 'assigned' vertext list\n\n\tremoveAllVerticesFromFace( face ) {\n\n\t\tif ( face.outside !== null ) {\n\n\t\t\t// reference to the first and last vertex of this face\n\n\t\t\tconst start = face.outside;\n\t\t\tlet end = face.outside;\n\n\t\t\twhile ( end.next !== null && end.next.face === face ) {\n\n\t\t\t\tend = end.next;\n\n\t\t\t}\n\n\t\t\tthis.assigned.removeSubList( start, end );\n\n\t\t\t// fix references\n\n\t\t\tstart.prev = end.next = null;\n\t\t\tface.outside = null;\n\n\t\t\treturn start;\n\n\t\t}\n\n\t}\n\n\t// Removes all the visible vertices that 'face' is able to see\n\n\tdeleteFaceVertices( face, absorbingFace ) {\n\n\t\tconst faceVertices = this.removeAllVerticesFromFace( face );\n\n\t\tif ( faceVertices !== undefined ) {\n\n\t\t\tif ( absorbingFace === undefined ) {\n\n\t\t\t\t// mark the vertices to be reassigned to some other face\n\n\t\t\t\tthis.unassigned.appendChain( faceVertices );\n\n\n\t\t\t} else {\n\n\t\t\t\t// if there's an absorbing face try to assign as many vertices as possible to it\n\n\t\t\t\tlet vertex = faceVertices;\n\n\t\t\t\tdo {\n\n\t\t\t\t\t// we need to buffer the subsequent vertex at this point because the 'vertex.next' reference\n\t\t\t\t\t// will be changed by upcoming method calls\n\n\t\t\t\t\tconst nextVertex = vertex.next;\n\n\t\t\t\t\tconst distance = absorbingFace.distanceToPoint( vertex.point );\n\n\t\t\t\t\t// check if 'vertex' is able to see 'absorbingFace'\n\n\t\t\t\t\tif ( distance > this.tolerance ) {\n\n\t\t\t\t\t\tthis.addVertexToFace( vertex, absorbingFace );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.unassigned.append( vertex );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// now assign next vertex\n\n\t\t\t\t\tvertex = nextVertex;\n\n\t\t\t\t} while ( vertex !== null );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Reassigns as many vertices as possible from the unassigned list to the new faces\n\n\tresolveUnassignedPoints( newFaces ) {\n\n\t\tif ( this.unassigned.isEmpty() === false ) {\n\n\t\t\tlet vertex = this.unassigned.first();\n\n\t\t\tdo {\n\n\t\t\t\t// buffer 'next' reference, see .deleteFaceVertices()\n\n\t\t\t\tconst nextVertex = vertex.next;\n\n\t\t\t\tlet maxDistance = this.tolerance;\n\n\t\t\t\tlet maxFace = null;\n\n\t\t\t\tfor ( let i = 0; i < newFaces.length; i ++ ) {\n\n\t\t\t\t\tconst face = newFaces[ i ];\n\n\t\t\t\t\tif ( face.mark === Visible ) {\n\n\t\t\t\t\t\tconst distance = face.distanceToPoint( vertex.point );\n\n\t\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\t\tmaxFace = face;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( maxDistance > 1000 * this.tolerance ) break;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// 'maxFace' can be null e.g. if there are identical vertices\n\n\t\t\t\tif ( maxFace !== null ) {\n\n\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\n\n\t\t\t\t}\n\n\t\t\t\tvertex = nextVertex;\n\n\t\t\t} while ( vertex !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Computes the extremes of a simplex which will be the initial hull\n\n\tcomputeExtremes() {\n\n\t\tconst min = new Vector3();\n\t\tconst max = new Vector3();\n\n\t\tconst minVertices = [];\n\t\tconst maxVertices = [];\n\n\t\t// initially assume that the first vertex is the min/max\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tminVertices[ i ] = maxVertices[ i ] = this.vertices[ 0 ];\n\n\t\t}\n\n\t\tmin.copy( this.vertices[ 0 ].point );\n\t\tmax.copy( this.vertices[ 0 ].point );\n\n\t\t// compute the min/max vertex on all six directions\n\n\t\tfor ( let i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\tconst vertex = this.vertices[ i ];\n\t\t\tconst point = vertex.point;\n\n\t\t\t// update the min coordinates\n\n\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\tif ( point.getComponent( j ) < min.getComponent( j ) ) {\n\n\t\t\t\t\tmin.setComponent( j, point.getComponent( j ) );\n\t\t\t\t\tminVertices[ j ] = vertex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the max coordinates\n\n\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\tif ( point.getComponent( j ) > max.getComponent( j ) ) {\n\n\t\t\t\t\tmax.setComponent( j, point.getComponent( j ) );\n\t\t\t\t\tmaxVertices[ j ] = vertex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use min/max vectors to compute an optimal epsilon\n\n\t\tthis.tolerance = 3 * Number.EPSILON * (\n\t\t\tMath.max( Math.abs( min.x ), Math.abs( max.x ) ) +\n\t\t\tMath.max( Math.abs( min.y ), Math.abs( max.y ) ) +\n\t\t\tMath.max( Math.abs( min.z ), Math.abs( max.z ) )\n\t\t);\n\n\t\treturn { min: minVertices, max: maxVertices };\n\n\t}\n\n\t// Computes the initial simplex assigning to its faces all the points\n\t// that are candidates to form part of the hull\n\n\tcomputeInitialHull() {\n\n\t\tconst vertices = this.vertices;\n\t\tconst extremes = this.computeExtremes();\n\t\tconst min = extremes.min;\n\t\tconst max = extremes.max;\n\n\t\t// 1. Find the two vertices 'v0' and 'v1' with the greatest 1d separation\n\t\t// (max.x - min.x)\n\t\t// (max.y - min.y)\n\t\t// (max.z - min.z)\n\n\t\tlet maxDistance = 0;\n\t\tlet index = 0;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst distance = max[ i ].point.getComponent( i ) - min[ i ].point.getComponent( i );\n\n\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\tmaxDistance = distance;\n\t\t\t\tindex = i;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst v0 = min[ index ];\n\t\tconst v1 = max[ index ];\n\t\tlet v2;\n\t\tlet v3;\n\n\t\t// 2. The next vertex 'v2' is the one farthest to the line formed by 'v0' and 'v1'\n\n\t\tmaxDistance = 0;\n\t\t_line3.set( v0.point, v1.point );\n\n\t\tfor ( let i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\tconst vertex = vertices[ i ];\n\n\t\t\tif ( vertex !== v0 && vertex !== v1 ) {\n\n\t\t\t\t_line3.closestPointToPoint( vertex.point, true, _closestPoint );\n\n\t\t\t\tconst distance = _closestPoint.distanceToSquared( vertex.point );\n\n\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\tv2 = vertex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// 3. The next vertex 'v3' is the one farthest to the plane 'v0', 'v1', 'v2'\n\n\t\tmaxDistance = - 1;\n\t\t_plane.setFromCoplanarPoints( v0.point, v1.point, v2.point );\n\n\t\tfor ( let i = 0, l = this.vertices.length; i < l; i ++ ) {\n\n\t\t\tconst vertex = vertices[ i ];\n\n\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 ) {\n\n\t\t\t\tconst distance = Math.abs( _plane.distanceToPoint( vertex.point ) );\n\n\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\tv3 = vertex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst faces = [];\n\n\t\tif ( _plane.distanceToPoint( v3.point ) < 0 ) {\n\n\t\t\t// the face is not able to see the point so 'plane.normal' is pointing outside the tetrahedron\n\n\t\t\tfaces.push(\n\t\t\t\tFace.create( v0, v1, v2 ),\n\t\t\t\tFace.create( v3, v1, v0 ),\n\t\t\t\tFace.create( v3, v2, v1 ),\n\t\t\t\tFace.create( v3, v0, v2 )\n\t\t\t);\n\n\t\t\t// set the twin edge\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst j = ( i + 1 ) % 3;\n\n\t\t\t\t// join face[ i ] i > 0, with the first face\n\n\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( j ) );\n\n\t\t\t\t// join face[ i ] with face[ i + 1 ], 1 <= i <= 3\n\n\t\t\t\tfaces[ i + 1 ].getEdge( 1 ).setTwin( faces[ j + 1 ].getEdge( 0 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// the face is able to see the point so 'plane.normal' is pointing inside the tetrahedron\n\n\t\t\tfaces.push(\n\t\t\t\tFace.create( v0, v2, v1 ),\n\t\t\t\tFace.create( v3, v0, v1 ),\n\t\t\t\tFace.create( v3, v1, v2 ),\n\t\t\t\tFace.create( v3, v2, v0 )\n\t\t\t);\n\n\t\t\t// set the twin edge\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tconst j = ( i + 1 ) % 3;\n\n\t\t\t\t// join face[ i ] i > 0, with the first face\n\n\t\t\t\tfaces[ i + 1 ].getEdge( 2 ).setTwin( faces[ 0 ].getEdge( ( 3 - i ) % 3 ) );\n\n\t\t\t\t// join face[ i ] with face[ i + 1 ]\n\n\t\t\t\tfaces[ i + 1 ].getEdge( 0 ).setTwin( faces[ j + 1 ].getEdge( 1 ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// the initial hull is the tetrahedron\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ] );\n\n\t\t}\n\n\t\t// initial assignment of vertices to the faces of the tetrahedron\n\n\t\tfor ( let i = 0, l = vertices.length; i < l; i ++ ) {\n\n\t\t\tconst vertex = vertices[ i ];\n\n\t\t\tif ( vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3 ) {\n\n\t\t\t\tmaxDistance = this.tolerance;\n\t\t\t\tlet maxFace = null;\n\n\t\t\t\tfor ( let j = 0; j < 4; j ++ ) {\n\n\t\t\t\t\tconst distance = this.faces[ j ].distanceToPoint( vertex.point );\n\n\t\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\t\tmaxFace = this.faces[ j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( maxFace !== null ) {\n\n\t\t\t\t\tthis.addVertexToFace( vertex, maxFace );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Removes inactive faces\n\n\treindexFaces() {\n\n\t\tconst activeFaces = [];\n\n\t\tfor ( let i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tconst face = this.faces[ i ];\n\n\t\t\tif ( face.mark === Visible ) {\n\n\t\t\t\tactiveFaces.push( face );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.faces = activeFaces;\n\n\t\treturn this;\n\n\t}\n\n\t// Finds the next vertex to create faces with the current hull\n\n\tnextVertexToAdd() {\n\n\t\t// if the 'assigned' list of vertices is empty, no vertices are left. return with 'undefined'\n\n\t\tif ( this.assigned.isEmpty() === false ) {\n\n\t\t\tlet eyeVertex, maxDistance = 0;\n\n\t\t\t// grap the first available face and start with the first visible vertex of that face\n\n\t\t\tconst eyeFace = this.assigned.first().face;\n\t\t\tlet vertex = eyeFace.outside;\n\n\t\t\t// now calculate the farthest vertex that face can see\n\n\t\t\tdo {\n\n\t\t\t\tconst distance = eyeFace.distanceToPoint( vertex.point );\n\n\t\t\t\tif ( distance > maxDistance ) {\n\n\t\t\t\t\tmaxDistance = distance;\n\t\t\t\t\teyeVertex = vertex;\n\n\t\t\t\t}\n\n\t\t\t\tvertex = vertex.next;\n\n\t\t\t} while ( vertex !== null && vertex.face === eyeFace );\n\n\t\t\treturn eyeVertex;\n\n\t\t}\n\n\t}\n\n\t// Computes a chain of half edges in CCW order called the 'horizon'.\n\t// For an edge to be part of the horizon it must join a face that can see\n\t// 'eyePoint' and a face that cannot see 'eyePoint'.\n\n\tcomputeHorizon( eyePoint, crossEdge, face, horizon ) {\n\n\t\t// moves face's vertices to the 'unassigned' vertex list\n\n\t\tthis.deleteFaceVertices( face );\n\n\t\tface.mark = Deleted;\n\n\t\tlet edge;\n\n\t\tif ( crossEdge === null ) {\n\n\t\t\tedge = crossEdge = face.getEdge( 0 );\n\n\t\t} else {\n\n\t\t\t// start from the next edge since 'crossEdge' was already analyzed\n\t\t\t// (actually 'crossEdge.twin' was the edge who called this method recursively)\n\n\t\t\tedge = crossEdge.next;\n\n\t\t}\n\n\t\tdo {\n\n\t\t\tconst twinEdge = edge.twin;\n\t\t\tconst oppositeFace = twinEdge.face;\n\n\t\t\tif ( oppositeFace.mark === Visible ) {\n\n\t\t\t\tif ( oppositeFace.distanceToPoint( eyePoint ) > this.tolerance ) {\n\n\t\t\t\t\t// the opposite face can see the vertex, so proceed with next edge\n\n\t\t\t\t\tthis.computeHorizon( eyePoint, twinEdge, oppositeFace, horizon );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// the opposite face can't see the vertex, so this edge is part of the horizon\n\n\t\t\t\t\thorizon.push( edge );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tedge = edge.next;\n\n\t\t} while ( edge !== crossEdge );\n\n\t\treturn this;\n\n\t}\n\n\t// Creates a face with the vertices 'eyeVertex.point', 'horizonEdge.tail' and 'horizonEdge.head' in CCW order\n\n\taddAdjoiningFace( eyeVertex, horizonEdge ) {\n\n\t\t// all the half edges are created in ccw order thus the face is always pointing outside the hull\n\n\t\tconst face = Face.create( eyeVertex, horizonEdge.tail(), horizonEdge.head() );\n\n\t\tthis.faces.push( face );\n\n\t\t// join face.getEdge( - 1 ) with the horizon's opposite edge face.getEdge( - 1 ) = face.getEdge( 2 )\n\n\t\tface.getEdge( - 1 ).setTwin( horizonEdge.twin );\n\n\t\treturn face.getEdge( 0 ); // the half edge whose vertex is the eyeVertex\n\n\n\t}\n\n\t//  Adds 'horizon.length' faces to the hull, each face will be linked with the\n\t//  horizon opposite face and the face on the left/right\n\n\taddNewFaces( eyeVertex, horizon ) {\n\n\t\tthis.newFaces = [];\n\n\t\tlet firstSideEdge = null;\n\t\tlet previousSideEdge = null;\n\n\t\tfor ( let i = 0; i < horizon.length; i ++ ) {\n\n\t\t\tconst horizonEdge = horizon[ i ];\n\n\t\t\t// returns the right side edge\n\n\t\t\tconst sideEdge = this.addAdjoiningFace( eyeVertex, horizonEdge );\n\n\t\t\tif ( firstSideEdge === null ) {\n\n\t\t\t\tfirstSideEdge = sideEdge;\n\n\t\t\t} else {\n\n\t\t\t\t// joins face.getEdge( 1 ) with previousFace.getEdge( 0 )\n\n\t\t\t\tsideEdge.next.setTwin( previousSideEdge );\n\n\t\t\t}\n\n\t\t\tthis.newFaces.push( sideEdge.face );\n\t\t\tpreviousSideEdge = sideEdge;\n\n\t\t}\n\n\t\t// perform final join of new faces\n\n\t\tfirstSideEdge.next.setTwin( previousSideEdge );\n\n\t\treturn this;\n\n\t}\n\n\t// Adds a vertex to the hull\n\n\taddVertexToHull( eyeVertex ) {\n\n\t\tconst horizon = [];\n\n\t\tthis.unassigned.clear();\n\n\t\t// remove 'eyeVertex' from 'eyeVertex.face' so that it can't be added to the 'unassigned' vertex list\n\n\t\tthis.removeVertexFromFace( eyeVertex, eyeVertex.face );\n\n\t\tthis.computeHorizon( eyeVertex.point, null, eyeVertex.face, horizon );\n\n\t\tthis.addNewFaces( eyeVertex, horizon );\n\n\t\t// reassign 'unassigned' vertices to the new faces\n\n\t\tthis.resolveUnassignedPoints( this.newFaces );\n\n\t\treturn\tthis;\n\n\t}\n\n\tcleanup() {\n\n\t\tthis.assigned.clear();\n\t\tthis.unassigned.clear();\n\t\tthis.newFaces = [];\n\n\t\treturn this;\n\n\t}\n\n\tcompute() {\n\n\t\tlet vertex;\n\n\t\tthis.computeInitialHull();\n\n\t\t// add all available vertices gradually to the hull\n\n\t\twhile ( ( vertex = this.nextVertexToAdd() ) !== undefined ) {\n\n\t\t\tthis.addVertexToHull( vertex );\n\n\t\t}\n\n\t\tthis.reindexFaces();\n\n\t\tthis.cleanup();\n\n\t\treturn this;\n\n\t}\n\n}\n\n//\n\nclass Face {\n\n\tconstructor() {\n\n\t\tthis.normal = new Vector3();\n\t\tthis.midpoint = new Vector3();\n\t\tthis.area = 0;\n\n\t\tthis.constant = 0; // signed distance from face to the origin\n\t\tthis.outside = null; // reference to a vertex in a vertex list this face can see\n\t\tthis.mark = Visible;\n\t\tthis.edge = null;\n\n\t}\n\n\tstatic create( a, b, c ) {\n\n\t\tconst face = new Face();\n\n\t\tconst e0 = new HalfEdge( a, face );\n\t\tconst e1 = new HalfEdge( b, face );\n\t\tconst e2 = new HalfEdge( c, face );\n\n\t\t// join edges\n\n\t\te0.next = e2.prev = e1;\n\t\te1.next = e0.prev = e2;\n\t\te2.next = e1.prev = e0;\n\n\t\t// main half edge reference\n\n\t\tface.edge = e0;\n\n\t\treturn face.compute();\n\n\t}\n\n\tgetEdge( i ) {\n\n\t\tlet edge = this.edge;\n\n\t\twhile ( i > 0 ) {\n\n\t\t\tedge = edge.next;\n\t\t\ti --;\n\n\t\t}\n\n\t\twhile ( i < 0 ) {\n\n\t\t\tedge = edge.prev;\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn edge;\n\n\t}\n\n\tcompute() {\n\n\t\tconst a = this.edge.tail();\n\t\tconst b = this.edge.head();\n\t\tconst c = this.edge.next.head();\n\n\t\t_triangle.set( a.point, b.point, c.point );\n\n\t\t_triangle.getNormal( this.normal );\n\t\t_triangle.getMidpoint( this.midpoint );\n\t\tthis.area = _triangle.getArea();\n\n\t\tthis.constant = this.normal.dot( this.midpoint );\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) - this.constant;\n\n\t}\n\n}\n\n// Entity for a Doubly-Connected Edge List (DCEL).\n\nclass HalfEdge {\n\n\n\tconstructor( vertex, face ) {\n\n\t\tthis.vertex = vertex;\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\t\tthis.twin = null;\n\t\tthis.face = face;\n\n\t}\n\n\thead() {\n\n\t\treturn this.vertex;\n\n\t}\n\n\ttail() {\n\n\t\treturn this.prev ? this.prev.vertex : null;\n\n\t}\n\n\tlength() {\n\n\t\tconst head = this.head();\n\t\tconst tail = this.tail();\n\n\t\tif ( tail !== null ) {\n\n\t\t\treturn tail.point.distanceTo( head.point );\n\n\t\t}\n\n\t\treturn - 1;\n\n\t}\n\n\tlengthSquared() {\n\n\t\tconst head = this.head();\n\t\tconst tail = this.tail();\n\n\t\tif ( tail !== null ) {\n\n\t\t\treturn tail.point.distanceToSquared( head.point );\n\n\t\t}\n\n\t\treturn - 1;\n\n\t}\n\n\tsetTwin( edge ) {\n\n\t\tthis.twin = edge;\n\t\tedge.twin = this;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// A vertex as a double linked list node.\n\nclass VertexNode {\n\n\tconstructor( point ) {\n\n\t\tthis.point = point;\n\t\tthis.prev = null;\n\t\tthis.next = null;\n\t\tthis.face = null; // the face that is able to see this vertex\n\n\t}\n\n}\n\n// A double linked list that contains vertex nodes.\n\nclass VertexList {\n\n\tconstructor() {\n\n\t\tthis.head = null;\n\t\tthis.tail = null;\n\n\t}\n\n\tfirst() {\n\n\t\treturn this.head;\n\n\t}\n\n\tlast() {\n\n\t\treturn this.tail;\n\n\t}\n\n\tclear() {\n\n\t\tthis.head = this.tail = null;\n\n\t\treturn this;\n\n\t}\n\n\t// Inserts a vertex before the target vertex\n\n\tinsertBefore( target, vertex ) {\n\n\t\tvertex.prev = target.prev;\n\t\tvertex.next = target;\n\n\t\tif ( vertex.prev === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tvertex.prev.next = vertex;\n\n\t\t}\n\n\t\ttarget.prev = vertex;\n\n\t\treturn this;\n\n\t}\n\n\t// Inserts a vertex after the target vertex\n\n\tinsertAfter( target, vertex ) {\n\n\t\tvertex.prev = target;\n\t\tvertex.next = target.next;\n\n\t\tif ( vertex.next === null ) {\n\n\t\t\tthis.tail = vertex;\n\n\t\t} else {\n\n\t\t\tvertex.next.prev = vertex;\n\n\t\t}\n\n\t\ttarget.next = vertex;\n\n\t\treturn this;\n\n\t}\n\n\t// Appends a vertex to the end of the linked list\n\n\tappend( vertex ) {\n\n\t\tif ( this.head === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tthis.tail.next = vertex;\n\n\t\t}\n\n\t\tvertex.prev = this.tail;\n\t\tvertex.next = null; // the tail has no subsequent vertex\n\n\t\tthis.tail = vertex;\n\n\t\treturn this;\n\n\t}\n\n\t// Appends a chain of vertices where 'vertex' is the head.\n\n\tappendChain( vertex ) {\n\n\t\tif ( this.head === null ) {\n\n\t\t\tthis.head = vertex;\n\n\t\t} else {\n\n\t\t\tthis.tail.next = vertex;\n\n\t\t}\n\n\t\tvertex.prev = this.tail;\n\n\t\t// ensure that the 'tail' reference points to the last vertex of the chain\n\n\t\twhile ( vertex.next !== null ) {\n\n\t\t\tvertex = vertex.next;\n\n\t\t}\n\n\t\tthis.tail = vertex;\n\n\t\treturn this;\n\n\t}\n\n\t// Removes a vertex from the linked list\n\n\tremove( vertex ) {\n\n\t\tif ( vertex.prev === null ) {\n\n\t\t\tthis.head = vertex.next;\n\n\t\t} else {\n\n\t\t\tvertex.prev.next = vertex.next;\n\n\t\t}\n\n\t\tif ( vertex.next === null ) {\n\n\t\t\tthis.tail = vertex.prev;\n\n\t\t} else {\n\n\t\t\tvertex.next.prev = vertex.prev;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Removes a list of vertices whose 'head' is 'a' and whose 'tail' is b\n\n\tremoveSubList( a, b ) {\n\n\t\tif ( a.prev === null ) {\n\n\t\t\tthis.head = b.next;\n\n\t\t} else {\n\n\t\t\ta.prev.next = b.next;\n\n\t\t}\n\n\t\tif ( b.next === null ) {\n\n\t\t\tthis.tail = a.prev;\n\n\t\t} else {\n\n\t\t\tb.next.prev = a.prev;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn this.head === null;\n\n\t}\n\n}\n\nexport { ConvexHull };\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute\n} from 'three';\nimport { ConvexHull } from '../math/ConvexHull.js';\n\nclass ConvexGeometry extends BufferGeometry {\n\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\t// buffers\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\n\t\tif ( ConvexHull === undefined ) {\n\n\t\t\tconsole.error( 'THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on ConvexHull' );\n\n\t\t}\n\n\t\tconst convexHull = new ConvexHull().setFromPoints( points );\n\n\t\t// generate vertices and normals\n\n\t\tconst faces = convexHull.faces;\n\n\t\tfor ( let i = 0; i < faces.length; i ++ ) {\n\n\t\t\tconst face = faces[ i ];\n\t\t\tlet edge = face.edge;\n\n\t\t\t// we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n\t\t\tdo {\n\n\t\t\t\tconst point = edge.head().point;\n\n\t\t\t\tvertices.push( point.x, point.y, point.z );\n\t\t\t\tnormals.push( face.normal.x, face.normal.y, face.normal.z );\n\n\t\t\t\tedge = edge.next;\n\n\t\t\t} while ( edge !== face.edge );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n}\n\nexport { ConvexGeometry };\n","import { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { ConvexGeometry } from 'three/examples/jsm/geometries/ConvexGeometry';\nimport * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { OrbitControls, useTexture } from '@react-three/drei'\n\nimport { aspect_ratio } from '../../contants'\nimport disc from '../../textures/sprites/disc.png'\n\nconst Meshes = () => {\n  const texture = useTexture(disc)\n\n  const groupRef: any = useRef()\n\n  const { pointsGeometry, meshGeometry} = useMemo(() => {\n    let dodecahedronGeometry = new THREE.DodecahedronGeometry(10)\n\n    // if normal and uv attributes are not removed, mergeVertices() can't consolidate indentical vertices with different normal/uv data\n    dodecahedronGeometry.deleteAttribute('normal')\n    dodecahedronGeometry.deleteAttribute('uv')\n\n    dodecahedronGeometry = BufferGeometryUtils.mergeVertices(dodecahedronGeometry) as any\n\n    const vertices = []\n    const positionAttribute = dodecahedronGeometry.getAttribute('position')\n\n    for (let i =0; i< positionAttribute.count; i++) {\n      const vertex = new THREE.Vector3()\n      vertex.fromBufferAttribute(positionAttribute, i)\n      vertices.push(vertex)\n    }\n\n    const pointsGeometry = new THREE.BufferGeometry().setFromPoints(vertices)\n    const meshGeometry = new ConvexGeometry(vertices)\n\n    return { pointsGeometry, meshGeometry }\n  }, [])\n\n  useFrame(() => {\n    groupRef.current.rotation.y += 0.005\n  })\n\n  return (\n    <group ref={groupRef}>\n      <points geometry={pointsGeometry}>\n        <pointsMaterial color='#0080ff' map={texture} size={1} alphaTest={0.5} />\n      </points>\n      <mesh geometry={meshGeometry} renderOrder={0}>\n        <meshLambertMaterial color='#ffffff' opacity={0.5} transparent={true} side={THREE.BackSide} />\n      </mesh>\n      <mesh geometry={meshGeometry} renderOrder={1}>\n        <meshLambertMaterial color='#ffffff' opacity={0.5} transparent={true} side={THREE.FrontSide} />\n      </mesh>\n    </group>\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{ position: [15, 20, 30], fov: 40, aspect: aspect_ratio, near: 1, far: 1000 }}\n      gl={{ antialias: true }} dpr={devicePixelRatio} >\n      <color attach='background' args={[0x000000]} />\n      <ambientLight args={[0x222222]} />\n      <pointLight args={[0xffffff, 1]} />\n      <axesHelper args={[20]} />\n      <Meshes />\n      <OrbitControls minDistance={20} maxDistance={50} maxPolarAngle={Math.PI / 2} />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","_v1","Vector3","_line3","Line3","_plane","Plane","_closestPoint","_triangle","Triangle","ConvexHull","this","tolerance","faces","newFaces","assigned","VertexList","unassigned","vertices","points","length","makeEmpty","i","l","push","VertexNode","compute","object","updateMatrixWorld","traverse","node","geometry","undefined","isGeometry","console","error","isBufferGeometry","attribute","attributes","position","count","point","fromBufferAttribute","applyMatrix4","matrixWorld","setFromPoints","distanceToPoint","ray","target","tNear","Infinity","tFar","face","vN","origin","vD","normal","dot","direction","t","Math","min","max","at","intersectRay","vertex","outside","append","insertBefore","next","remove","start","end","removeSubList","prev","absorbingFace","faceVertices","removeAllVerticesFromFace","appendChain","nextVertex","addVertexToFace","isEmpty","first","maxDistance","maxFace","mark","distance","minVertices","maxVertices","copy","j","getComponent","setComponent","Number","EPSILON","abs","x","y","z","extremes","computeExtremes","index","v2","v3","v0","v1","set","closestPointToPoint","distanceToSquared","setFromCoplanarPoints","Face","create","getEdge","setTwin","activeFaces","eyeVertex","eyeFace","eyePoint","crossEdge","horizon","edge","deleteFaceVertices","twinEdge","twin","oppositeFace","computeHorizon","horizonEdge","tail","head","firstSideEdge","previousSideEdge","sideEdge","addAdjoiningFace","clear","removeVertexFromFace","addNewFaces","resolveUnassignedPoints","computeInitialHull","nextVertexToAdd","addVertexToHull","reindexFaces","cleanup","midpoint","area","constant","a","b","c","getNormal","getMidpoint","getArea","e0","HalfEdge","e1","e2","distanceTo","ConvexGeometry","normals","convexHull","setAttribute","Float32BufferAttribute","BufferGeometry","Meshes","texture","useTexture","groupRef","useRef","useMemo","dodecahedronGeometry","THREE","deleteAttribute","positionAttribute","BufferGeometryUtils","getAttribute","pointsGeometry","meshGeometry","useFrame","current","rotation","ref","color","map","size","alphaTest","renderOrder","opacity","transparent","side","camera","fov","aspect","near","far","gl","antialias","dpr","devicePixelRatio","attach","args","OrbitControls","minDistance","maxPolarAngle","PI"],"sourceRoot":""}