{"version":3,"file":"static/js/453.0576617d.chunk.js","mappings":"gOAAO,IAAMA,EAAeC,OAAOC,WAAa,IAAOD,OAAOC,WAAa,IAAOD,OAAOC,WAC5EC,EAAgBF,OAAOC,WAAa,IAAMD,OAAOG,YAAeH,OAAOG,YAAc,GAErFC,EAAeL,EAAeG,G,yKCOrCG,EAAS,WACb,IAAMC,GAAUC,EAAAA,EAAAA,G,s2DAEVC,GAAgBC,EAAAA,EAAAA,UAEtB,GAAwCC,EAAAA,EAAAA,UAAQ,WAC9C,IAAIC,EAAuB,IAAIC,EAAAA,qBAA2B,IAG1DD,EAAqBE,gBAAgB,UACrCF,EAAqBE,gBAAgB,MAOrC,IAHA,IAAMC,EAAW,GACXC,GAHNJ,EAAuBK,EAAAA,GAAkCL,IAGVM,aAAa,YAEnDC,EAAG,EAAGA,EAAGH,EAAkBI,MAAOD,IAAK,CAC9C,IAAME,EAAS,IAAIR,EAAAA,QACnBQ,EAAOC,oBAAoBN,EAAmBG,GAC9CJ,EAASQ,KAAKF,GAMhB,MAAO,CAAEG,gBAHc,IAAIX,EAAAA,gBAAuBY,cAAcV,GAGvCW,aAFJ,IAAIC,EAAAA,EAAeZ,MAGvC,IAtBKS,EAAR,EAAQA,eAAgBE,EAAxB,EAAwBA,aA4BxB,OAJAE,EAAAA,EAAAA,IAAS,WACPnB,EAASoB,QAAQC,SAASC,GAAK,SAI/B,mBAAOC,IAAKvB,EAAZ,WACE,mBAAQwB,SAAUT,EAAlB,UACE,2BAAgBU,MAAM,UAAUC,IAAK5B,EAAS6B,KAAM,EAAGC,UAAW,QAEpE,iBAAMJ,SAAUP,EAAcY,YAAa,EAA3C,UACE,gCAAqBJ,MAAM,UAAUK,QAAS,GAAKC,aAAa,EAAMC,KAAM5B,EAAAA,cAE9E,iBAAMoB,SAAUP,EAAcY,YAAa,EAA3C,UACE,gCAAqBJ,MAAM,UAAUK,QAAS,GAAKC,aAAa,EAAMC,KAAM5B,EAAAA,kBAoBpF,EAdgB,WACd,OACE,UAAC,KAAD,CAAQ6B,OAAQ,CAAEC,SAAU,CAAC,GAAI,GAAI,IAAKC,IAAK,GAAIC,OAAQxC,EAAAA,GAAcyC,KAAM,EAAGC,IAAK,KACrFC,GAAI,CAAEC,WAAW,GAAQC,IAAKC,iBADhC,WAEE,kBAAOC,OAAO,aAAaC,KAAM,CAAC,MAClC,yBAAcA,KAAM,CAAC,YACrB,uBAAYA,KAAM,CAAC,SAAU,MAC7B,uBAAYA,KAAM,CAAC,OACnB,SAAC/C,EAAD,KACA,SAACgD,EAAA,EAAD,CAAeC,YAAa,GAAIC,YAAa,GAAIC,cAAeC,KAAKC,GAAK","sources":["contants.tsx","webgl/geometry_convex/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { ConvexGeometry } from 'three/examples/jsm/geometries/ConvexGeometry';\nimport * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { OrbitControls, useTexture } from '@react-three/drei'\n\nimport { aspect_ratio } from '../../contants'\nimport disc from '../../textures/sprites/disc.png'\n\nconst Meshes = () => {\n  const texture = useTexture(disc)\n\n  const groupRef: any = useRef()\n\n  const { pointsGeometry, meshGeometry} = useMemo(() => {\n    let dodecahedronGeometry = new THREE.DodecahedronGeometry(10)\n\n    // if normal and uv attributes are not removed, mergeVertices() can't consolidate indentical vertices with different normal/uv data\n    dodecahedronGeometry.deleteAttribute('normal')\n    dodecahedronGeometry.deleteAttribute('uv')\n\n    dodecahedronGeometry = BufferGeometryUtils.mergeVertices(dodecahedronGeometry) as any\n\n    const vertices = []\n    const positionAttribute = dodecahedronGeometry.getAttribute('position')\n\n    for (let i =0; i< positionAttribute.count; i++) {\n      const vertex = new THREE.Vector3()\n      vertex.fromBufferAttribute(positionAttribute, i)\n      vertices.push(vertex)\n    }\n\n    const pointsGeometry = new THREE.BufferGeometry().setFromPoints(vertices)\n    const meshGeometry = new ConvexGeometry(vertices)\n\n    return { pointsGeometry, meshGeometry }\n  }, [])\n\n  useFrame(() => {\n    groupRef.current.rotation.y += 0.005\n  })\n\n  return (\n    <group ref={groupRef}>\n      <points geometry={pointsGeometry}>\n        <pointsMaterial color='#0080ff' map={texture} size={1} alphaTest={0.5} />\n      </points>\n      <mesh geometry={meshGeometry} renderOrder={0}>\n        <meshLambertMaterial color='#ffffff' opacity={0.5} transparent={true} side={THREE.BackSide} />\n      </mesh>\n      <mesh geometry={meshGeometry} renderOrder={1}>\n        <meshLambertMaterial color='#ffffff' opacity={0.5} transparent={true} side={THREE.FrontSide} />\n      </mesh>\n    </group>\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{ position: [15, 20, 30], fov: 40, aspect: aspect_ratio, near: 1, far: 1000 }}\n      gl={{ antialias: true }} dpr={devicePixelRatio} >\n      <color attach='background' args={[0x000000]} />\n      <ambientLight args={[0x222222]} />\n      <pointLight args={[0xffffff, 1]} />\n      <axesHelper args={[20]} />\n      <Meshes />\n      <OrbitControls minDistance={20} maxDistance={50} maxPolarAngle={Math.PI / 2} />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","Meshes","texture","useTexture","groupRef","useRef","useMemo","dodecahedronGeometry","THREE","deleteAttribute","vertices","positionAttribute","BufferGeometryUtils","getAttribute","i","count","vertex","fromBufferAttribute","push","pointsGeometry","setFromPoints","meshGeometry","ConvexGeometry","useFrame","current","rotation","y","ref","geometry","color","map","size","alphaTest","renderOrder","opacity","transparent","side","camera","position","fov","aspect","near","far","gl","antialias","dpr","devicePixelRatio","attach","args","OrbitControls","minDistance","maxDistance","maxPolarAngle","Math","PI"],"sourceRoot":""}