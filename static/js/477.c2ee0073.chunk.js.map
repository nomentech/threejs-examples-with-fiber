{"version":3,"file":"static/js/477.c2ee0073.chunk.js","mappings":"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","sources":["contants.tsx","webgl/geometry_shapes/Example.tsx","../node_modules/@react-three/drei/core/PerspectiveCamera.js","../node_modules/@react-three/drei/core/useTexture.js"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import * as THREE from 'three'\nimport { Canvas, extend, Object3DNode } from '@react-three/fiber'\nimport { OrbitControls, PerspectiveCamera, useTexture } from '@react-three/drei'\n\nimport { aspect_ratio } from '../../contants'\nimport uv_grid_opengl from '../../textures/uv_grid_opengl.jpg'\n\n// Add class `Line` as `Line_` to react-three-fiber's extend function. This\n// makes it so that when you use <line_> in a <Canvas>, the three reconciler\n// will use the class `Line`\nextend({ Line_: THREE.Line })\n// declare `line_` as a JSX element so that typescript doesn't complain\ndeclare global {\n  namespace JSX {\n      interface IntrinsicElements {\n          'line_': Object3DNode<THREE.Line, typeof THREE.Line>,\n      }\n  }\n}\n\nconst Shape = ({ shape, color, x, y, z, rx, ry, rz, s }: any) => {\n  const texture = useTexture(uv_grid_opengl)\n  texture.wrapS =texture.wrapT = THREE.RepeatWrapping\n  texture.repeat.set(0.008, 0.008)\n\n  const extrudeSettings = { depth: 8, bevelEnabled: true, bevelSegments: 2, steps: 2, bevelSize: 1, bevelThickness: 1 }\n\n  return (\n    <group position-y={50}>\n      {/* flat shape with texture\n\t\t\t\t  note: default UVs generated by THREE.ShapeGeometry are simply the x- and y-coordinates of the vertices */}\n      <mesh position={[x, y, z-175]} rotation={[rx, ry, rz]} scale={s}>\n        <shapeGeometry args={[shape]} />\n        <meshPhongMaterial side={THREE.DoubleSide} map={texture} />\n      </mesh>\n\n      {/* flat shape */}\n      <mesh position={[x, y, z-125]} rotation={[rx, ry, rz]} scale={s} >\n        <shapeGeometry args={[shape]} />\n        <meshPhongMaterial color={color} side={THREE.DoubleSide} />\n      </mesh>\n\n      {/* extruded shape */}\n      <mesh position={[x, y, z-75]} rotation={[rx, ry, rz]} scale={s} >\n        <extrudeGeometry args={[shape ,extrudeSettings]} />\n        <meshPhongMaterial color={color} />\n      </mesh>\n\n      <LineShape shape={shape} color={color} x={x} y={y} z={z} rx={rx} r={ry} rz={rz} s={s} />\n    </group>\n  )\n}\n\nconst LineShape = ({ shape, color, x, y, z, rx, ry, rz, s }: any) => {\n  // lines\n  shape.autoClose = true\n\n  const points = shape.getPoints()\n  const spacedPoints = shape.getSpacedPoints(50)\n\n  const geometryPoints = new THREE.BufferGeometry().setFromPoints(points)\n  const geometrySpacedPoints = new THREE.BufferGeometry().setFromPoints(spacedPoints)\n\n  return (\n    <>\n      {/* solid line */}\n      <line_ geometry={geometryPoints} position={[x, y, z - 25]} rotation={[rx, ry, rz]} scale={s} >\n        <lineBasicMaterial color={color} />\n      </line_>\n\n      {/* line from equidistance sampled points */}\n      <line_ geometry={geometrySpacedPoints} position={[x, y, z + 25]} rotation={[rx, ry, rz]} scale={s} >\n        <lineBasicMaterial color={color} />\n      </line_>\n\n      {/* vertices from real points */}\n      <points geometry={geometryPoints} position={[x, y , z + 75]} rotation={[rx, ry, rz]} scale={s} >\n        <pointsMaterial color={color} size={4} />\n      </points>\n\n      {/* equidistance sampled points */}\n      <points geometry={geometryPoints} position={[x, y , z + 125]} rotation={[rx, ry, rz]} scale={s} >\n        <pointsMaterial color={color} size={4} />\n      </points>\n    </>\n  )\n}\n\nconst Example = () => {\n  // California\n  const californiaPts = []\n\n  californiaPts.push(new THREE.Vector2(610, 320))\n  californiaPts.push(new THREE.Vector2(450, 300))\n  californiaPts.push(new THREE.Vector2(392, 392))\n  californiaPts.push(new THREE.Vector2(266, 438))\n  californiaPts.push(new THREE.Vector2(190, 570))\n  californiaPts.push(new THREE.Vector2(190, 600))\n  californiaPts.push(new THREE.Vector2(160, 620))\n  californiaPts.push(new THREE.Vector2(160, 650))\n  californiaPts.push(new THREE.Vector2(180, 640))\n  californiaPts.push(new THREE.Vector2(165, 680))\n  californiaPts.push(new THREE.Vector2(150, 670))\n  californiaPts.push(new THREE.Vector2(90, 737))\n  californiaPts.push(new THREE.Vector2(80, 795))\n  californiaPts.push(new THREE.Vector2(50, 835))\n  californiaPts.push(new THREE.Vector2(64, 870))\n  californiaPts.push(new THREE.Vector2(60, 945))\n  californiaPts.push(new THREE.Vector2(300, 945))\n  californiaPts.push(new THREE.Vector2(300, 743))\n  californiaPts.push(new THREE.Vector2(600, 473))\n  californiaPts.push(new THREE.Vector2(626, 425))\n  californiaPts.push(new THREE.Vector2(600, 370))\n  californiaPts.push(new THREE.Vector2(610, 320))\n\n  for (let i = 0; i < californiaPts.length; i ++) californiaPts[i].multiplyScalar(0.25)\n  const californiaShape = new THREE.Shape(californiaPts)\n\n  // Triangle\n  const triangleShape = new THREE.Shape()\n    .moveTo(80, 20)\n    .lineTo(40, 80)\n    .lineTo(120, 80)\n    .lineTo(80, 20) // close path\n\n\n  // Heart\n  const x = 0, y = 0\n\n  const heartShape = new THREE.Shape()\n    .moveTo(x + 25, y + 25)\n    .bezierCurveTo(x + 25, y + 25, x + 20, y, x, y)\n    .bezierCurveTo(x - 30, y, x - 30, y + 35, x - 30, y + 35)\n    .bezierCurveTo(x - 30, y + 55, x - 10, y + 77, x + 25, y + 95)\n    .bezierCurveTo(x + 60, y + 77, x + 80, y + 55, x + 80, y + 35)\n    .bezierCurveTo(x + 80, y + 35, x + 80, y, x + 50, y)\n    .bezierCurveTo(x + 35, y, x + 25, y + 25, x + 25, y + 25)\n\n\n  // Square\n  const sqLength = 80\n\n  const squareShape = new THREE.Shape()\n    .moveTo(0, 0)\n    .lineTo(0, sqLength)\n    .lineTo(sqLength, sqLength)\n    .lineTo(sqLength, 0)\n    .lineTo(0, 0)\n\n  // Rounded rectangle\n  const width=50, height=50, radius=20\n\n  const roundedRectShape = new THREE.Shape()\n    .moveTo(x, y + radius)\n    .lineTo(x, y + height - radius)\n    .quadraticCurveTo(x, y + height, x + radius, y + height)\n    .lineTo(x + width - radius, y + height)\n    .quadraticCurveTo(x + width, y + height, x + width, y + height - radius)\n    .lineTo(x + width, y + radius)\n    .quadraticCurveTo(x + width, y, x + width - radius, y)\n    .lineTo(x + radius, y)\n    .quadraticCurveTo(x, y, x, y + radius)\n\n  // Track\n  const trackShape = new THREE.Shape()\n    .moveTo(40, 40)\n    .lineTo(40, 160)\n    .absarc(60, 160, 20, Math.PI, 0, true)\n    .lineTo(80, 40)\n    .absarc(60, 40, 20, 2 * Math.PI, Math.PI, true)\n\n  // Circle\n  const circleRadius = 40\n  const circleShape = new THREE.Shape()\n    .moveTo(0, circleRadius)\n    .quadraticCurveTo(circleRadius, circleRadius, circleRadius, 0)\n    .quadraticCurveTo(circleRadius, - circleRadius, 0, - circleRadius)\n    .quadraticCurveTo(- circleRadius, - circleRadius, - circleRadius, 0)\n    .quadraticCurveTo(- circleRadius, circleRadius, 0, circleRadius)\n\n\n  // Fish\n  const fishShape = new THREE.Shape()\n    .moveTo(x, y)\n    .quadraticCurveTo(x + 50, y - 80, x + 90, y - 10)\n    .quadraticCurveTo(x + 100, y - 10, x + 115, y - 40)\n    .quadraticCurveTo(x + 115, y, x + 115, y + 40)\n    .quadraticCurveTo(x + 100, y + 10, x + 90, y + 10)\n    .quadraticCurveTo(x + 50, y + 80, x, y)\n\n\n  // Arc circle\n  const arcShape = new THREE.Shape()\n    .moveTo(50, 10)\n    .absarc(10, 10, 40, 0, Math.PI * 2, false)\n\n  const holePath = new THREE.Path()\n    .moveTo(20, 10)\n    .absarc(10, 10, 10, 0, Math.PI * 2, true)\n\n  arcShape.holes.push(holePath)\n\n\n  // Smiley\n  const smileyShape = new THREE.Shape()\n    .moveTo(80, 40)\n    .absarc(40, 40, 40, 0, Math.PI * 2, false)\n\n  const smileyEye1Path = new THREE.Path()\n    .moveTo(35, 20)\n    .absellipse(25, 20, 10, 10, 0, Math.PI * 2, true, 0)\n\n  const smileyEye2Path = new THREE.Path()\n    .moveTo(65, 20)\n    .absarc(55, 20, 10, 0, Math.PI * 2, true)\n\n  const smileyMouthPath = new THREE.Path()\n    .moveTo(20, 40)\n    .quadraticCurveTo(40, 60, 60, 40)\n    .bezierCurveTo(70, 45, 70, 50, 60, 60)\n    .quadraticCurveTo(40, 80, 20, 60)\n    .quadraticCurveTo(5, 50, 20, 40)\n\n  smileyShape.holes.push(smileyEye1Path)\n  smileyShape.holes.push(smileyEye2Path)\n  smileyShape.holes.push(smileyMouthPath)\n\n\n  // Spline shape\n  const splinepts = []\n  splinepts.push(new THREE.Vector2(70, 20))\n  splinepts.push(new THREE.Vector2(80, 90))\n  splinepts.push(new THREE.Vector2(-30, 70))\n  splinepts.push(new THREE.Vector2(0, 0))\n\n  const splineShape = new THREE.Shape()\n    .moveTo(0, 0)\n    .splineThru(splinepts)\n\n  return (\n    <Canvas gl={{ antialias: true }}>\n      <PerspectiveCamera args={[50, aspect_ratio, 1, 1000]} position={[0, 150, 500]} makeDefault >\n        <pointLight args={[0xffffff, 0.8]} />\n      </PerspectiveCamera>\n      <color attach='background' args={[0xf0f0f0]} />\n      <Shape shape={californiaShape} color={0xf08000} x={-300} y={-100} z={0} rx={0} ry={0} rz={0} s={0} />\n      <Shape shape={triangleShape} color={0x8080f0} x={-180} y={0} z={0} rx={0} ry={0} rz={0} s={1} />\n\t\t\t<Shape shape={roundedRectShape} color={0x008000} x={-150} y={150} z={0} rx={0} ry={0} rz={0} s={1} />\n\t\t\t<Shape shape={trackShape} color={0x008080} x={200} y={-100} z={0} rx={0} ry={0} rz={0} s={1} />\n\t\t\t<Shape shape={squareShape} color={0x0040f0} x={150} y={100} z={0} rx={0} ry={0} rz={0} s={1} />\n\t\t\t<Shape shape={heartShape} color={0xf00000} x={60} y={100} z={0} rx={0} ry={0} rz={Math.PI} s={1} />\n\t\t\t<Shape shape={circleShape} color={0x00f000} x={120} y={250} z={0} rx={0} ry={0} rz={0} s={1} />\n\t\t\t<Shape shape={fishShape} color={0x404040} x={-60} y={200} z={0} rx={0} ry={0} rz={0} s={1} />\n\t\t\t<Shape shape={smileyShape} color={0xf000f0} x={-200} y={250} z={0} rx={0} ry={0} rz={Math.PI} s={1} />\n\t\t\t<Shape shape={arcShape} color={0x804000} x={150}y ={0} z={0} rx={0} ry={0} rz={0} s={1} />\n\t\t\t<Shape shape={splineShape} color={0x808080} x={-50} y={-100} z={0} rx={0} ry={0} rz={0} s={1} />\n\n      <LineShape shape={arcShape.holes[0]} color={0x804000} x={150} y={0} z={0} rx={0} ry={0} rz={0} s={1} />\n      {smileyShape.holes.map((hole, i) => (\n        <LineShape key={i} shape={hole} color={0xf000f0} x={-200} y={250} z={0} rx={0} ry={0} rz={Math.PI} s={1} />\n      ))}\n      <OrbitControls />\n    </Canvas>\n  )\n}\n\nexport default Example","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\nconst PerspectiveCamera = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  ...props\n}, ref) => {\n  const set = useThree(({\n    set\n  }) => set);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const size = useThree(({\n    size\n  }) => size);\n  const cameraRef = React.useRef();\n  React.useLayoutEffect(() => {\n    const {\n      current: cam\n    } = cameraRef;\n\n    if (cam && !props.manual) {\n      cam.aspect = size.width / size.height;\n      cam.updateProjectionMatrix();\n    }\n  }, [size, props]);\n  React.useLayoutEffect(() => {\n    if (makeDefault && cameraRef.current) {\n      const oldCam = camera;\n      set(() => ({\n        camera: cameraRef.current\n      }));\n      return () => set(() => ({\n        camera: oldCam\n      }));\n    }\n  }, [camera, cameraRef, makeDefault, set]);\n  return /*#__PURE__*/React.createElement(\"perspectiveCamera\", _extends({\n    ref: mergeRefs([cameraRef, ref])\n  }, props));\n});\n\nexport { PerspectiveCamera };\n","import { TextureLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useEffect } from 'react';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input); // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n\n  useEffect(() => {\n    const array = Array.isArray(textures) ? textures : [textures];\n    array.forEach(gl.initTexture);\n  }, [gl, textures]);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","extend","Line_","THREE","Shape","shape","color","x","y","z","rx","ry","rz","s","texture","useTexture","uv_grid_opengl","wrapS","wrapT","repeat","set","position","rotation","scale","args","side","map","depth","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","LineShape","r","autoClose","points","getPoints","spacedPoints","getSpacedPoints","geometryPoints","setFromPoints","geometrySpacedPoints","geometry","size","californiaPts","push","i","length","multiplyScalar","californiaShape","triangleShape","moveTo","lineTo","heartShape","bezierCurveTo","squareShape","roundedRectShape","quadraticCurveTo","trackShape","absarc","Math","PI","circleRadius","circleShape","fishShape","arcShape","holePath","holes","smileyShape","smileyEye1Path","absellipse","smileyEye2Path","smileyMouthPath","splinepts","splineShape","splineThru","gl","antialias","makeDefault","attach","hole","PerspectiveCamera","React","ref","props","useThree","camera","cameraRef","cam","current","manual","aspect","width","height","updateProjectionMatrix","oldCam","_extends","mergeRefs","IsObject","url","Object","Array","isArray","input","state","textures","useLoader","TextureLoader","values","useEffect","forEach","initTexture","keys","keyed","key","assign","indexOf","preload","clear"],"sourceRoot":""}