{"version":3,"file":"static/js/171.c8c75a08.chunk.js","mappings":"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","sources":["contants.tsx","webgl/clipping/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { useRef } from 'react'\nimport { DoubleSide, MeshPhongMaterial, Plane, Vector3 } from 'three'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport { useControls } from 'leva'\n\nimport { aspect_ratio } from '../../contants'\n\nlet material: any\nconst Empty: any = Object.freeze([])\nconst localPlane = new Plane(new Vector3(0, - 1, 0 ), 0.8)\nconst globalPlane = new Plane(new Vector3(- 1, 0, 0 ), 0.1)\nconst globalPlanes = [globalPlane]\n\nconst Mesh = () => {\n  const meshRef: any = useRef()\n  material = new MeshPhongMaterial( {\n    color: 0x80ee10,\n    shininess: 100,\n    side: DoubleSide,\n\n    // ***** Clipping setup (material): *****\n    clippingPlanes: [ localPlane ],\n    clipShadows: true\n  } )\n\n  useFrame(({ clock }) => {\n    const time = clock.getElapsedTime()\n\n    meshRef.current.position.y = 0.8\n    meshRef.current.rotation.x = time * 0.5\n    meshRef.current.rotation.y = time * 0.2\n    meshRef.current.scale.setScalar(Math.cos(time) * 0.125 + 0.875)\n  })\n\n  return (\n    <>    \n      <mesh castShadow ref={meshRef} material={material}>\n        <torusKnotGeometry args={[0.4, 0.08, 95, 20]} />\n        {/* <meshPhongMaterial ref={material} color='#80ee10' shininess={100} side={DoubleSide} \n          clippingPlanes={[localPlane]} clipShadows={true} /> */}\n      </mesh>\n    </> \n  )\n}\n\nconst Ground = () => {\n  return (\n    <mesh rotation={[-Math.PI / 2, 0, 0]} receiveShadow >\n      <planeGeometry args={[9, 9, 1, 1]} />\n      <meshPhongMaterial color={0xa0adaf} shininess={150} />\n    </mesh>\n  )\n}\n\nconst Controls = () => {\n  const { gl } = useThree()\n  gl.clippingPlanes = Empty // GUI sets it to globalPlanes\n  gl.localClippingEnabled = true\n\n  useControls('Local Clipping', {\n    'Enabled': {\n      value: gl.localClippingEnabled,\n      onChange: (v) => gl.localClippingEnabled = v\n    },\n    'Shadows': {\n      value: material.clipShadows,\n      onChange: (v) => material.clipShadows = v\n    },\n    'Plane': {\n      value: localPlane.constant,\n      min: 0.3,\n      max: 1.25,\n      onChange: (v) => localPlane.constant = v\n    }\n  })\n\n  useControls('Global Clipping', {\n    'Enabled': {\n      value: gl.clippingPlanes !== Empty,\n      onChange: (v) => gl.clippingPlanes = v ? globalPlanes : Empty\n    },\n    'Plane': {\n      value: globalPlane.constant,\n      min: -0.4,\n      max: 3,\n      onChange: (v) => globalPlane.constant = v\n    }\n  })\n\n  return null\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{position: [0, 1.3, 3], fov: 36, aspect: aspect_ratio, near: 0.26, far: 16}} shadows>\n      <color attach='background' args={['black']} />\n      <ambientLight args={[0x505050]} />\n      <spotLight color={0xffffff} angle={Math.PI / 5} penumbra={0.2} position={[2, 3, 3]} \n        castShadow shadow-camera-near={3} shadow-camera-far={10} shadow-mapSize={[1024, 1024]} />\n      <directionalLight args={[0x55505a, 1]} position={[0, 3, 0]} \n        castShadow shadow-mapSize={[1024, 1024]}\n        // shadow-camera-near={1} shadow-camera-far={10}\n        // shadow-camera-top={1} shadow-camera-bottom={-1}\n        // shadow-camera-right={1} shadow-camera-left={-1} \n      >\n        <orthographicCamera attach='shadow-camera' args={[-1, 1, 1, -1, 1, 10]} />\n      </directionalLight>\n      <Mesh />\n      <Ground />\n      <Controls />\n      <OrbitControls target={[0, 1, 0]} />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","material","Empty","Object","freeze","localPlane","Plane","Vector3","globalPlane","globalPlanes","Mesh","meshRef","useRef","MeshPhongMaterial","color","shininess","side","DoubleSide","clippingPlanes","clipShadows","useFrame","time","clock","getElapsedTime","current","position","y","rotation","x","scale","setScalar","Math","cos","castShadow","ref","args","Ground","PI","receiveShadow","Controls","gl","useThree","localClippingEnabled","useControls","value","onChange","v","constant","min","max","camera","fov","aspect","near","far","shadows","attach","angle","penumbra","target"],"sourceRoot":""}