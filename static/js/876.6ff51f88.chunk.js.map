{"version":3,"file":"static/js/876.6ff51f88.chunk.js","mappings":"gOAAO,IAAMA,EAAeC,OAAOC,WAAa,IAAOD,OAAOC,WAAa,IAAOD,OAAOC,WAC5EC,EAAgBF,OAAOC,WAAa,IAAMD,OAAOG,YAAeH,OAAOG,YAAc,GAErFC,EAAeL,EAAeG,G,+GCKrCG,GACc,EADdA,EAEW,EAFXA,GAGS,EAGTC,EAAa,CACjB,IAAIC,EAAAA,MAAY,IAAIA,EAAAA,QAAc,EAAG,EAAG,GAAI,GAC5C,IAAIA,EAAAA,MAAY,IAAIA,EAAAA,QAAc,GAAI,EAAG,GAAI,GAC7C,IAAIA,EAAAA,MAAY,IAAIA,EAAAA,QAAc,EAAG,GAAI,GAAI,IAGzCC,EAAS,WACb,IAAMC,GAAeC,EAAAA,EAAAA,UACfC,GAAkBD,EAAAA,EAAAA,WAETE,EAAAA,EAAAA,KAAPC,GACLC,sBAAuB,GAE1BC,EAAAA,EAAAA,IAAY,CACV,iBAAoB,CAClBC,MAAO,oBACPC,MAAOZ,EACPa,SAAU,SAACD,GAGT,IAFA,IAAME,EAAWV,EAAQW,QAAQD,SAExBE,EAAI,EAAGA,EAAIF,EAASG,OAAQD,IACnCF,EAASE,GAAGE,SAASC,iBAAmBP,IAI9C,cAAiB,CACfD,MAAO,gBACPC,MAAOZ,EACPoB,KAAM,EAAGC,IAAK,EAAGC,KAAM,IACvBT,SAAU,SAACD,GACT,IAAK,IAAIW,EAAI,EAAGA,EAAItB,EAAWgB,OAAQM,IACrCtB,EAAWsB,GAAGC,SAAWZ,IAI/B,YAAe,CACbD,MAAO,eACPC,MAAOZ,EACPa,SAAU,SAACD,GACTN,EAAWS,QAAQU,QAAUb,MAMnC,IADA,IAAMc,EAAS,GACNV,EAAI,EAAGA,GAAK,GAAIA,GAAK,EAC5BU,EAAOC,MACL,6BACE,2BAAgBC,KAAM,CAACZ,EAAI,GAAI,GAAI,OACnC,gCACEa,OAAO,IAAI3B,EAAAA,OAAc4B,OAAOC,KAAKC,SAAU,GAAK,IACpDC,KAAM/B,EAAAA,WACNgC,eAAgBjC,EACrBkB,iBAAkBnB,MANNgB,IAYf,OACE,iCACE,kBAAOmB,IAAK/B,EAAZ,SACGsB,KAEH,mBAAOS,IAAK7B,EAAYmB,SAAS,EAAjC,WACE,wBAAaG,KAAM,CAAC3B,EAAW,GAAI,EAAG,aACtC,wBAAa2B,KAAM,CAAC3B,EAAW,GAAI,EAAG,UACtC,wBAAa2B,KAAM,CAAC3B,EAAW,GAAI,EAAG,cAqB9C,UAfgB,WACd,OACE,UAAC,KAAD,CAAQmC,OAAQ,CAACC,SAAU,EAAE,IAAK,IAAK,GAAMC,IAAK,GAAIC,OAAQxC,EAAAA,GAAcyC,KAAM,EAAGC,IAAK,KAA1F,WACE,kBAAOC,OAAO,aAAad,KAAM,CAAC,YAClC,4BAAiBA,KAAM,CAAC,SAAU,OAAU,KAAMS,SAAU,EAAE,KAAM,EAAG,SACvE,SAAClC,EAAD,KACA,SAAC,IAAD,CACEwC,YAAa,EACbC,YAAa,GACbC,WAAW","sources":["contants.tsx","webgl/clipping_intersection/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { useRef } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useThree } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport { useControls } from 'leva'\n\nimport { aspect_ratio } from '../../contants'\n\nconst params = {\n  clipIntersection: true,\n  planeConstant: 0,\n  showHelpers: false\n}\n\nconst clipPlanes = [\n  new THREE.Plane(new THREE.Vector3(1, 0, 0), 0),\n  new THREE.Plane(new THREE.Vector3(0, -1, 0), 0),\n  new THREE.Plane(new THREE.Vector3(0, 0, -1), 0)\n]\n\nconst Meshes = () => {\n  const meshRef: any = useRef()\n  const helpersRef: any = useRef()\n  \n  const { gl } = useThree()\n  gl.localClippingEnabled = true\n\n  useControls({\n    'clipIntersection': {\n      label: 'clip intersection',\n      value: params.clipIntersection,\n      onChange: (value) => {\n        const children = meshRef.current.children\n\n        for (let i = 0; i < children.length; i++) {\n          children[i].material.clipIntersection = value\n        }\n      }\n    },\n    'planeConstant': {\n      label: 'plane contant',\n      value: params.planeConstant,\n      min: -1, max: 1, step: 0.01,\n      onChange: (value) => {\n        for (let j = 0; j < clipPlanes.length; j++) {\n          clipPlanes[j].constant = value\n        }\n      }\n    },\n    'showHelpers': {\n      label: 'show helpers',\n      value: params.showHelpers,\n      onChange: (value: number) => {\n        helpersRef.current.visible = value\n      }\n    }\n  })\n\n  const meshes = []\n  for (let i = 1; i <= 30; i += 2) {\n    meshes.push(\n      <mesh key={i}>\n        <sphereGeometry args={[i / 30, 48, 24]} />\n        <meshLambertMaterial\n          color={new THREE.Color().setHSL(Math.random(), 0.5, 0.5)}\n          side={THREE.DoubleSide}\n          clippingPlanes={clipPlanes}\n\t\t\t\t\tclipIntersection={params.clipIntersection}\n        />\n      </mesh>\n    )\n  }\n\n  return (\n    <>\n      <group ref={meshRef}>\n        {meshes}\n      </group>\n      <group ref={helpersRef} visible={false}>\n        <planeHelper args={[clipPlanes[0], 2, 0xff0000]} />\n        <planeHelper args={[clipPlanes[1], 2, 0x00ff00]} />\n        <planeHelper args={[clipPlanes[2], 2, 0x0000ff]} />\n      </group>\n    </>\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{position: [-1.5, 2.5, 3.0], fov: 40, aspect: aspect_ratio, near: 1, far: 200}} >\n      <color attach='background' args={['black']} />\n      <hemisphereLight args={[0xffffff, 0x080808, 1.5]} position={[-1.25, 1, 1.25]} />\n      <Meshes />\n      <OrbitControls \n        minDistance={1}\n        maxDistance={10}\n        enablePan={false}\n      />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","params","clipPlanes","THREE","Meshes","meshRef","useRef","helpersRef","useThree","gl","localClippingEnabled","useControls","label","value","onChange","children","current","i","length","material","clipIntersection","min","max","step","j","constant","visible","meshes","push","args","color","setHSL","Math","random","side","clippingPlanes","ref","camera","position","fov","aspect","near","far","attach","minDistance","maxDistance","enablePan"],"sourceRoot":""}