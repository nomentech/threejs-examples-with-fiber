{"version":3,"file":"static/js/332.1d087c1d.chunk.js","mappings":"0MAKMA,EAAeC,OAAOC,WAAaD,OAAOE,YAC1CC,EAAUH,OAAOC,WAFR,EAEgCD,OAAOI,iBAChDC,EAAWL,OAAOE,YAHT,EAGkCF,OAAOI,iBAElDE,EAAa,WACjB,OACE,kBAAMC,SAAU,CAAC,EAAG,GAAI,GAAIC,eAAa,EAAzC,WACE,0BAAeC,KAAM,CAAC,IAAK,QAC3B,8BAAmBC,MAAO,UAK1BC,EAAW,WACf,IAAMC,GAAYC,EAAAA,EAAAA,UAOlB,OALAC,EAAAA,EAAAA,IAAS,WACPF,EAAKG,QAAQC,SAASC,GAAK,KAC3BL,EAAKG,QAAQC,SAASE,GAAK,QAI3B,kBAAMC,IAAKP,EAAMQ,YAAU,EAACZ,eAAa,EAAzC,WACE,6BAAkBC,KAAM,CAAC,GAAK,GAAK,EAAG,OACtC,8BAAmBC,MAAO,eAK1BW,EAAU,WAEd,IADA,IAAMC,EAAU,GACPC,EAAI,EAAGA,EAhCH,EAgCeA,IAC1B,IAAK,IAAIN,EAAI,EAAGA,EAjCL,EAiCiBA,IAAM,CAChC,IAAMO,EAAiB,IAAIC,EAAAA,kBAAkB,GAAI1B,EAAc,GAAK,IACpEyB,EAAUE,SAAW,IAAIC,EAAAA,QAASC,KAAKC,MAAOZ,EAAId,GAASyB,KAAKC,MAAON,EAAIlB,GAAUuB,KAAKE,KAAM3B,GAASyB,KAAKE,KAAMzB,IACpHmB,EAAUjB,SAASU,EAAKA,EApCf,EAoC6B,GACtCO,EAAUjB,SAASgB,EAAI,GAAOA,EArCrB,EAsCTC,EAAUjB,SAASW,EAAI,IACvBM,EAAUjB,SAASwB,eAAe,GAClCP,EAAUQ,OAAO,EAAG,EAAG,GACvBR,EAAUS,oBACVX,EAAQY,KAAKV,GAIjB,OACE,wBAAaF,QAASA,EAASf,SAAU,CAAC,EAAG,EAAG,MAgBpD,UAZgB,WACd,OACE,UAAC,KAAD,CAAQ4B,SAAO,EAAf,WACE,SAACd,EAAD,KACA,yBAAcX,MAAO,WACrB,6BAAkBH,SAAU,CAAC,GAAK,GAAK,GAAIa,YAAU,EAAC,qBAAoB,KAC1E,SAACd,EAAD,KACA,SAACK,EAAD","sources":["webgl/camera_array/Example.tsx"],"sourcesContent":["import { PerspectiveCamera, Vector4 } from \"three\"\nimport { Canvas, useFrame } from \"@react-three/fiber\"\nimport { useRef } from \"react\"\n\nconst AMOUNT = 6\nconst ASPECT_RATIO = window.innerWidth / window.innerHeight\nconst WIDTH = ( window.innerWidth / AMOUNT ) * window.devicePixelRatio\nconst HEIGHT = ( window.innerHeight / AMOUNT ) * window.devicePixelRatio\n\nconst Background = () => {\n  return (\n    <mesh position={[0, 0, -1]} receiveShadow>\n      <planeGeometry args={[100, 100]} />\n      <meshPhongMaterial color={0x000066} />\n    </mesh>\n  )\n}\n\nconst Cylinder = () => {\n  const mesh: any = useRef()\n  \n  useFrame(() => {\n    mesh.current.rotation.x += 0.005\n    mesh.current.rotation.z += 0.01\n  })\n\n  return (\n    <mesh ref={mesh} castShadow receiveShadow>\n      <cylinderGeometry args={[0.5, 0.5, 1, 32]} />\n      <meshPhongMaterial color={0xff0000} />\n    </mesh>\n  )\n}\n\nconst Cameras = () => {\n  const cameras = []\n  for (let y = 0; y < AMOUNT; y ++) {\n    for (let x = 0; x < AMOUNT; x ++) {\n      const subcamera: any = new PerspectiveCamera(40, ASPECT_RATIO, 0.1, 10)\n      subcamera.viewport = new Vector4( Math.floor( x * WIDTH ), Math.floor( y * HEIGHT ), Math.ceil( WIDTH ), Math.ceil( HEIGHT ) );\n      subcamera.position.x = (x / AMOUNT) - 0.5\n      subcamera.position.y = 0.5 - (y / AMOUNT)\n      subcamera.position.z = 1.5\n      subcamera.position.multiplyScalar(2)\n      subcamera.lookAt(0, 0, 0)\n      subcamera.updateMatrixWorld()\n      cameras.push(subcamera)\n    }\n  }\n\n  return (\n    <arrayCamera cameras={cameras} position={[0, 0, 3]} />\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas shadows>\n      <Cameras />\n      <ambientLight color={0x222244} />\n      <directionalLight position={[0.5, 0.5, 1]} castShadow shadow-camera-zoom={4} />\n      <Background />\n      <Cylinder />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["ASPECT_RATIO","window","innerWidth","innerHeight","WIDTH","devicePixelRatio","HEIGHT","Background","position","receiveShadow","args","color","Cylinder","mesh","useRef","useFrame","current","rotation","x","z","ref","castShadow","Cameras","cameras","y","subcamera","PerspectiveCamera","viewport","Vector4","Math","floor","ceil","multiplyScalar","lookAt","updateMatrixWorld","push","shadows"],"sourceRoot":""}