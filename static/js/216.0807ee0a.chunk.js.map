{"version":3,"file":"static/js/216.0807ee0a.chunk.js","mappings":"gOAAO,IAAMA,EAAeC,OAAOC,WAAa,IAAOD,OAAOC,WAAa,IAAOD,OAAOC,WAC5EC,EAAgBF,OAAOC,WAAa,IAAMD,OAAOG,YAAeH,OAAOG,YAAc,GAErFC,EAAeL,EAAeG,G,qLCIrCG,EAAO,WACX,IAAMC,GAAUC,EAAAA,EAAAA,GAAWC,GAErBC,GAAeC,EAAAA,EAAAA,UAMrB,OALAC,EAAAA,EAAAA,IAAS,WACPF,EAAQG,QAAQC,SAASC,GAAK,KAC9BL,EAAQG,QAAQC,SAASE,GAAK,QAI9B,kBAAMC,IAAKP,EAAX,WACE,wBAAaQ,KAAM,CAAC,IAAK,IAAK,QAC9B,8BAAmBC,IAAKZ,QAe9B,EAVgB,WACd,OACE,UAAC,KAAD,CAAQa,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,KAAMC,IAAK,GAAIC,OAAQlB,EAAAA,GAAcmB,KAAK,EAAGC,IAAK,KACnFC,GAAI,CAAEC,WAAW,GAAOC,IAAKC,iBAD/B,WAEE,kBAAOC,OAAO,aAAaZ,KAAM,CAAC,MAClC,SAACZ,EAAD,S,iGCzBAyB,EAAW,SAAAC,GAAG,OAAIA,IAAQC,OAAOD,KAASE,MAAMC,QAAQH,IAAuB,oBAARA,GAC7E,SAASxB,EAAW4B,GAClB,IAAMV,GAAKW,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIA,EAAMZ,MAC7Ba,GAAWC,EAAAA,EAAAA,GAAUC,EAAAA,cAAeV,EAASK,GAASH,OAAOS,OAAON,GAASA,GAQnF,IALAO,EAAAA,EAAAA,YAAU,YACMT,MAAMC,QAAQI,GAAYA,EAAW,CAACA,IAC9CK,QAAQlB,EAAGmB,eAChB,CAACnB,EAAIa,IAEJR,EAASK,GAAQ,CACnB,IAAMU,EAAOb,OAAOa,KAAKV,GACnBW,EAAQ,GAId,OAHAD,EAAKF,SAAQ,SAAAI,GAAG,OAAIf,OAAOgB,OAAOF,GAAd,UACjBC,EAAMT,EAASO,EAAKI,QAAQF,SAExBD,EAEP,OAAOR,EAIX/B,EAAW2C,QAAU,SAAAnB,GAAG,OAAIQ,EAAAA,EAAAA,QAAkBC,EAAAA,cAAeT,IAE7DxB,EAAW4C,MAAQ,SAAAhB,GAAK,OAAII,EAAAA,EAAAA,MAAgBC,EAAAA,cAAeL","sources":["contants.tsx","webgl/geometry_cube/Example.tsx","../node_modules/@react-three/drei/core/useTexture.js"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { useTexture } from '@react-three/drei'\n\nimport { aspect_ratio } from '../../contants'\nimport crate from '../../textures/crate.gif'\n\nconst Mesh = () => {\n  const texture = useTexture(crate)\n\n  const meshRef: any = useRef()\n  useFrame(() => {\n    meshRef.current.rotation.x += 0.005\n    meshRef.current.rotation.y += 0.01\n  })\n\n  return (\n    <mesh ref={meshRef}>\n      <boxGeometry args={[200, 200, 200]} />\n      <meshBasicMaterial map={texture} />\n    </mesh>\n  )\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{ position: [0, 0, 400], fov: 70, aspect: aspect_ratio, near:1, far: 1000 }}\n      gl={{ antialias: true}} dpr={devicePixelRatio} >\n      <color attach='background' args={[0x000000]} />\n      <Mesh />\n    </Canvas>\n  )\n}\n\nexport default Example","import { TextureLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useEffect } from 'react';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input); // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n\n  useEffect(() => {\n    const array = Array.isArray(textures) ? textures : [textures];\n    array.forEach(gl.initTexture);\n  }, [gl, textures]);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","Mesh","texture","useTexture","crate","meshRef","useRef","useFrame","current","rotation","x","y","ref","args","map","camera","position","fov","aspect","near","far","gl","antialias","dpr","devicePixelRatio","attach","IsObject","url","Object","Array","isArray","input","useThree","state","textures","useLoader","TextureLoader","values","useEffect","forEach","initTexture","keys","keyed","key","assign","indexOf","preload","clear"],"sourceRoot":""}