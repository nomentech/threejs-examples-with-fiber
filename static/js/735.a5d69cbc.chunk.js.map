{"version":3,"file":"static/js/735.a5d69cbc.chunk.js","mappings":"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","sources":["contants.tsx","webgl/clipping_advanced/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { useEffect, useRef } from 'react'\nimport { Color, DoubleSide, Matrix4, MeshPhongMaterial, Plane, Vector3, WebGLRenderer } from 'three'\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min\"\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\n\nimport { aspect_ratio } from '../../contants'\n\nlet renderer: WebGLRenderer\nlet clipMaterial: MeshPhongMaterial\nlet globalClippingPlanes: any[]\nlet startTime: number\nlet volumeVisualization: any\n\nconst planesFromMesh = (vertices: Vector3[], indices: number[]) => {\n  // creates a clipping volume from a convex triangular mesh\n  // specified by the arrays 'vertices' and 'indices'\n\n  const n = indices.length / 3\n  const result = new Array(n)\n\n  for (let i = 0, j = 0; i < n; ++i, j+= 3) {\n    const a = vertices[indices[j]]\n    const b = vertices[indices[j+1]]\n    const c = vertices[indices[j+2]]\n\n    result[i] = new Plane().setFromCoplanarPoints(a, b, c)\n  }\n\n  return result\n}\n\nconst planeToMatrix = (function () {\n  // creates a matrix that aligns X/Y to a given plane\n\n  // temporaries:\n  const xAxis = new Vector3()\n  const yAxis = new Vector3()\n  const trans = new Vector3()\n\n  return function planeToMatrix(plane: any) {\n\n    const zAxis = plane.normal\n    const matrix = new Matrix4()\n\n    // Hughes & Moeller '99\n    // \"Building an Orthonormal Basis from a Unit Vector.\"\n    if (Math.abs(zAxis.x) > Math.abs(zAxis.z)) {\n      yAxis.set(-zAxis.y, zAxis.x, 0)\n    } else {\n      yAxis.set(0, -zAxis.z, zAxis.y)\n    }\n\n    xAxis.crossVectors(yAxis.normalize(), zAxis)\n\n    plane.coplanarPoint(trans)\n\n    return matrix.set(\n      xAxis.x, yAxis.x, zAxis.x, trans.x,\n      xAxis.y, yAxis.y, zAxis.y, trans.y,\n      xAxis.z, yAxis.z, zAxis.z, trans.z,\n      0,\t 0, 0, 1)\n  }\n})()\n\nconst createPlanes = (n: number) => {\n  // creates an array of n uninitialized plane objects\n  const result = new Array(n)\n\n  for (let i = 0; i !== n; ++i)\n    result[i] = new Plane()\n\n  return result\n}\n\nconst assignTransformedPlanes = (planesOut: any[], planesIn: any[], matrix: Matrix4) => {\n  // sets an array of existing planes to transformed 'planesIn'\n  for (let i = 0, n = planesIn.length; i !== n; ++ i)\n    planesOut[i].copy(planesIn[i]).applyMatrix4(matrix)\n}\n\nconst cylindricalPlanes = (n: number, innerRadius: number) => {\n  const result = createPlanes(n)\n\n  for (let i = 0; i !== n; ++ i) {\n    const plane = result[i]\n    const angle = i * Math.PI * 2 / n\n\n    plane.normal.set(\n      Math.cos(angle), 0, Math.sin(angle))\n\n    plane.constant = innerRadius\n  }\n\n  return result\n}\n\nconst setObjectWorldMatrix = (object: any, matrix: Matrix4) => {  \n  // set the orientation of an object based on a world matrix\n  const parent = object.parent\n  // scene.updateMatrixWorld()\n  object.matrix.copy( parent.matrixWorld ).invert()\n  object.applyMatrix4(matrix)\n}\n\nconst Vertices = [\n  new Vector3(1, 0, Math.SQRT1_2),\n  new Vector3(-1, 0, Math.SQRT1_2),\n  new Vector3(0, 1, -Math.SQRT1_2),\n  new Vector3(0, -1, -Math.SQRT1_2)\n]\nconst Indices = [0, 1, 2,   0, 2, 3,  0, 3, 1,   1, 3, 2]\nconst Planes = planesFromMesh(Vertices, Indices)\nconst PlaneMatrices = Planes.map(planeToMatrix)\nconst GlobalClippingPlanes = cylindricalPlanes(5, 2.5)\nconst Empty = Object.freeze([])\n\nconst transform = new Matrix4()\nconst tmpMatrix = new Matrix4()\n\nconst createControls = () => {\n  const gui = new GUI()\n\n  const folder = gui.addFolder('Local Clipping')\n  const props = {\n    get 'Enabled'() {\n      return renderer.localClippingEnabled\n    },\n    set 'Enabled'(v) {\n      renderer.localClippingEnabled = v\n      if (!v) volumeVisualization.current.visible = false\n    },\n    get 'Shadows'() {\n      return clipMaterial.clipShadows\n    },\n    set 'Shadows'(v) {\n      clipMaterial.clipShadows = v\n    },\n    get 'Visualize'() {\n      return volumeVisualization.current.visible\n    },\n    set 'Visualize'(v) {\n      if (renderer.localClippingEnabled)\n        volumeVisualization.current.visible = v\n    }\n  }\n\n  folder.add(props, 'Enabled')\n  folder.add(props, 'Shadows')\n  folder.add(props, 'Visualize').listen()\n\n  gui.addFolder('Global Clipping')\n    .add({\n      get 'Enabled'() {\n        return renderer.clippingPlanes !== Empty as any\n      },\n      set 'Enabled'(v) {\n        renderer.clippingPlanes = v ?\n          globalClippingPlanes : Empty as any\n      }\n    }, 'Enabled')\n}\n\nconst Light = () => {\n  return (\n    <>\n      <ambientLight args={[0xffffff, 0.3]} />\n      <spotLight color={0xffffff} intensity={0.5} angle={Math.PI / 5} \n        penumbra={0.2} position={[2, 3, 3]} castShadow \n        shadow-camera-near={3} shadow-camera-far={10}\n        shadow-mapSize-width={1024} shadow-mapSize-height={1024} />\n      <directionalLight color={0xffffff} intensity={0.5} position={[0, 2, 0]} castShadow \n        shadow-mapSize={[1024, 1024]}\n        // shadow-camera-near={1} shadow-camera-far={10} \n        // shadow-camera-right={1} shadow-camera-left={-1}\n        // shadow-camera-top={1} shadow-camera-bottom={-1}\n        // shadow-mapSize-width={1024} shadow-mapSize-height={1024} \n      >\n        <orthographicCamera attach='shadow-camera' args={[-1, 1, 1, -1, 1, 10]} />\n      </directionalLight>\n    </>\n  )\n}\n\nconst Mesh = () => {\n  const { gl } = useThree()\n  renderer = gl\n\n  // Clipping setup\n  globalClippingPlanes = createPlanes(GlobalClippingPlanes.length)\n  gl.clippingPlanes = Empty as any\n  gl.localClippingEnabled = true\n\n  clipMaterial = new MeshPhongMaterial({\n    color: 0xee0a10,\n    shininess: 100,\n    side: DoubleSide,\n    // Clipping setup\n    clippingPlanes: createPlanes(Planes.length),\n    clipShadows: true\n  })\n\n  const meshRef: any = useRef()\n  useFrame(() => {\n    const currentTime = Date.now()\n    const time = (currentTime - startTime) / 1000\n\n    meshRef.current.position.y = 1\n    meshRef.current.rotation.x = time * 0.5\n    meshRef.current.rotation.y = time * 0.2\n\n    meshRef.current.updateMatrix()\n    transform.copy(meshRef.current.matrix)\n    const bouncy = Math.cos(time*0.5)*0.5 + 0.7\n    transform.multiply(tmpMatrix.makeScale(bouncy, bouncy, bouncy))\n\n    assignTransformedPlanes(clipMaterial.clippingPlanes, Planes, transform)\n    const planeMeshes = volumeVisualization.current.children\n\n    for (let i = 0, n = planeMeshes.length; i !== n; ++ i) {\n      tmpMatrix.multiplyMatrices(transform, PlaneMatrices[i])\n      setObjectWorldMatrix(planeMeshes[i], tmpMatrix)\n    }\n    transform.makeRotationY(time * 0.1)\n    assignTransformedPlanes(globalClippingPlanes, GlobalClippingPlanes, transform)\n  })\n\n  const meshes = []\n  for (let z = - 2; z <= 2; ++ z)\n    for (let y = - 2; y <= 2; ++ y)\n      for (let x = - 2; x <= 2; ++ x) {\n        meshes.push(\n          <mesh key={Math.random()} material={clipMaterial} position={[x/5, y/5, z/5]} castShadow>\n            <boxGeometry args={[0.18, 0.18, 0.18]} />\n          </mesh>\n        )\n      }\n\n  return (\n    <>\n      <group ref={meshRef}>\n        {meshes}\n      </group>\n      <VolumeVisualization />\n    </>\n  )\n}\n\nconst VolumeVisualization = () => {\n  const meshes = []\n  const color = new Color()\n  for (let i = 0, n = Planes.length; i !== n; ++ i) {\n    meshes.push(\n      <mesh key={Math.random()} matrixAutoUpdate={false} >\n        <planeGeometry args={[3, 3, 1, 1]} />\n        <meshBasicMaterial color={color.setHSL(i/n, 0.5, 0.5).getHex()} \n          side={DoubleSide} opacity={0.2} transparent={true} \n          clippingPlanes={clipMaterial.clippingPlanes.filter((_: number, j: number) => j !== i)}\n        />\n      </mesh>\n    )\n  }\n\n  volumeVisualization = useRef()\n\n  useEffect(() => {\n    volumeVisualization.current.visible = false\n    createControls()\n  }, [])\n\n  return (\n    <>    \n      <group ref={volumeVisualization}>\n        {meshes}\n      </group>\n    </>\n  )\n}\n\nconst Ground = () => {\n  return (\n    <mesh rotation={[-Math.PI / 2, 0, 0]} scale={3} receiveShadow>\n      <planeGeometry args={[3, 3, 1, 1]} />\n      <meshPhongMaterial color={0xa0adaf} shininess={10} />\n    </mesh>\n  )\n}\n\nconst Example = () => {\n  useEffect(() => {\n    startTime = Date.now()\n  }, [])\n\n  return (\n    <Canvas camera={{position: [0, 1.5, 3], fov: 36, aspect: aspect_ratio, near: 0.25, far: 16}} shadows>\n      <color attach='background' args={['black']} />\n      <Light />\n      <Mesh />\n      <Ground />\n      <OrbitControls target={[0, 1, 0]} minDistance={1} maxDistance={8} />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","renderer","clipMaterial","globalClippingPlanes","startTime","volumeVisualization","planeToMatrix","xAxis","Vector3","yAxis","trans","plane","zAxis","normal","matrix","Matrix4","Math","abs","x","z","set","y","crossVectors","normalize","coplanarPoint","createPlanes","n","result","Array","i","Plane","assignTransformedPlanes","planesOut","planesIn","length","copy","applyMatrix4","setObjectWorldMatrix","object","parent","matrixWorld","invert","Planes","vertices","indices","j","a","b","c","setFromCoplanarPoints","planesFromMesh","SQRT1_2","PlaneMatrices","map","GlobalClippingPlanes","innerRadius","angle","PI","cos","sin","constant","cylindricalPlanes","Empty","Object","freeze","transform","tmpMatrix","Light","args","color","intensity","penumbra","position","castShadow","attach","Mesh","gl","useThree","clippingPlanes","localClippingEnabled","MeshPhongMaterial","shininess","side","DoubleSide","clipShadows","meshRef","useRef","useFrame","time","Date","now","current","rotation","updateMatrix","bouncy","multiply","makeScale","planeMeshes","children","multiplyMatrices","makeRotationY","meshes","push","material","random","ref","VolumeVisualization","Color","matrixAutoUpdate","setHSL","getHex","opacity","transparent","filter","_","useEffect","visible","gui","GUI","folder","addFolder","props","v","add","listen","createControls","Ground","scale","receiveShadow","camera","fov","aspect","near","far","shadows","target","minDistance","maxDistance"],"sourceRoot":""}