{"version":3,"file":"static/js/725.b00da87f.chunk.js","mappings":"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","sources":["contants.tsx","../node_modules/three-stdlib/effects/AnaglyphEffect.js","webgl/effects_anaglyph/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { Matrix3, OrthographicCamera, Scene, StereoCamera, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry, LinearFilter, NearestFilter, RGBAFormat } from 'three';\n\nconst AnaglyphEffect = function (renderer, width, height) {\n  // Dubois matrices from https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4\n  this.colorMatrixLeft = new Matrix3().fromArray([0.4561, -0.0400822, -0.0152161, 0.500484, -0.0378246, -0.0205971, 0.176381, -0.0157589, -0.00546856]);\n  this.colorMatrixRight = new Matrix3().fromArray([-0.0434706, 0.378476, -0.0721527, -0.0879388, 0.73364, -0.112961, -0.00155529, -0.0184503, 1.2264]);\n\n  const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n  const _scene = new Scene();\n\n  const _stereo = new StereoCamera();\n\n  const _params = {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  };\n  if (width === undefined) width = 512;\n  if (height === undefined) height = 512;\n\n  const _renderTargetL = new WebGLRenderTarget(width, height, _params);\n\n  const _renderTargetR = new WebGLRenderTarget(width, height, _params);\n\n  const _material = new ShaderMaterial({\n    uniforms: {\n      mapLeft: {\n        value: _renderTargetL.texture\n      },\n      mapRight: {\n        value: _renderTargetR.texture\n      },\n      colorMatrixLeft: {\n        value: this.colorMatrixLeft\n      },\n      colorMatrixRight: {\n        value: this.colorMatrixRight\n      }\n    },\n    vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = vec2( uv.x, uv.y );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['uniform sampler2D mapLeft;', 'uniform sampler2D mapRight;', 'varying vec2 vUv;', 'uniform mat3 colorMatrixLeft;', 'uniform mat3 colorMatrixRight;', // These functions implement sRGB linearization and gamma correction\n    'float lin( float c ) {', '\treturn c <= 0.04045 ? c * 0.0773993808 :', '\t\t\tpow( c * 0.9478672986 + 0.0521327014, 2.4 );', '}', 'vec4 lin( vec4 c ) {', '\treturn vec4( lin( c.r ), lin( c.g ), lin( c.b ), c.a );', '}', 'float dev( float c ) {', '\treturn c <= 0.0031308 ? c * 12.92', '\t\t\t: pow( c, 0.41666 ) * 1.055 - 0.055;', '}', 'void main() {', '\tvec2 uv = vUv;', '\tvec4 colorL = lin( texture2D( mapLeft, uv ) );', '\tvec4 colorR = lin( texture2D( mapRight, uv ) );', '\tvec3 color = clamp(', '\t\t\tcolorMatrixLeft * colorL.rgb +', '\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );', '\tgl_FragColor = vec4(', '\t\t\tdev( color.r ), dev( color.g ), dev( color.b ),', '\t\t\tmax( colorL.a, colorR.a ) );', '}'].join('\\n')\n  });\n\n  const _mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n\n  _scene.add(_mesh);\n\n  this.setSize = (width, height) => {\n    renderer.setSize(width, height);\n    const pixelRatio = renderer.getPixelRatio();\n\n    _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n\n    _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n  };\n\n  this.render = (scene, camera) => {\n    const currentRenderTarget = renderer.getRenderTarget();\n    scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _stereo.update(camera);\n\n    renderer.setRenderTarget(_renderTargetL);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraL);\n    renderer.setRenderTarget(_renderTargetR);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraR);\n    renderer.setRenderTarget(null);\n    renderer.render(_scene, _camera);\n    renderer.setRenderTarget(currentRenderTarget);\n  };\n\n  this.dispose = () => {\n    if (_renderTargetL) _renderTargetL.dispose();\n    if (_renderTargetR) _renderTargetR.dispose();\n    if (_mesh) _mesh.geometry.dispose();\n    if (_material) _material.dispose();\n  };\n};\n\nexport { AnaglyphEffect };\n","import { createRef, useEffect, useMemo } from 'react'\nimport { CubeTextureLoader, PerspectiveCamera } from 'three'\nimport { AnaglyphEffect } from 'three-stdlib'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\n\nimport { aspect_ratio } from '../../contants'\n\nimport px from '../../textures/cube/pisa/px.png'\nimport py from '../../textures/cube/pisa/py.png'\nimport pz from '../../textures/cube/pisa/pz.png'\nimport nx from '../../textures/cube/pisa/nx.png'\nimport ny from '../../textures/cube/pisa/ny.png'\nimport nz from '../../textures/cube/pisa/nz.png'\n\nconst urls = [px, nx, py, ny, pz, nz]\nconst textureCube = new CubeTextureLoader().load(urls)\n\nconst Effect = () => {\n  const { gl, scene, size, camera } = useThree()\n\n  const effect = useMemo(() => {\n    const effect = new AnaglyphEffect(gl)\n\n    return effect\n  }, [])\n\n  useEffect(() => {\n    effect.setSize(size.width || 2, size.height || 2)\n  }, [size])\n\n  useFrame(() => {\n    effect.render(scene, camera)\n  }, 1)\n\n  return null\n}\n\nconst Meshes = () => { \n  const { scene, camera } = useThree()\n  \n  const spheres = useMemo(() => {\n    const refs = []\n    for (let i=0; i<500; i++) {\n      refs.push(createRef())\n    }\n    return refs as any\n  }, [])\n\n  const meshes: any[] = []\n  for (let i=0; i<500; i++) {\n    meshes.push(\n      <mesh key={i} scale={Math.random()*3+1} ref={spheres[i]}\n        position={[Math.random()*10-5, Math.random()*10-5, Math.random()*10-5]}>\n        <sphereGeometry args={[0.1, 32, 16]} />\n        <meshBasicMaterial color={0xffffff} envMap={textureCube} />\n      </mesh>\n    )\n  }\n\n  useFrame(({ clock, mouse }) => {\n    const timer = clock.getElapsedTime() * 0.1\n\n    camera.position.x += (mouse.x - camera.position.x) * .05\n\t\tcamera.position.y += (-mouse.y - camera.position.y) * .05\n\n\t\tcamera.lookAt(scene.position)\n\n    for (let i=0, il=spheres.length; i<il; i++) {\n      const sphere = spheres[i].current\n      sphere.position.x = 5 * Math.cos(timer+i)\n      sphere.position.y = 5 * Math.sin(timer+i*1.1)\n    }\n  })\n  \n  return (\n    <>\n      {meshes.map(m => m)}\n    </>\n  )\n}\n\nconst Example = () => {\n  const camera = new PerspectiveCamera(60, aspect_ratio, 0.01, 100)\n  camera.position.z = 3\n  camera.setFocalLength(3)\n\n  return (\n    <Canvas>\n      <primitive attach='camera' object={camera} makeDefault />\n      <primitive attach='background' object={textureCube} />\n      <Meshes />\n      <Effect />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","AnaglyphEffect","renderer","width","height","this","colorMatrixLeft","Matrix3","fromArray","colorMatrixRight","_camera","OrthographicCamera","_scene","Scene","_stereo","StereoCamera","_params","minFilter","LinearFilter","magFilter","NearestFilter","format","RGBAFormat","undefined","_renderTargetL","WebGLRenderTarget","_renderTargetR","_material","ShaderMaterial","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","_mesh","Mesh","PlaneGeometry","add","setSize","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose","geometry","urls","px","nx","py","ny","pz","nz","textureCube","CubeTextureLoader","load","Effect","useThree","gl","size","effect","useMemo","useEffect","useFrame","Meshes","spheres","refs","i","push","createRef","meshes","scale","Math","random","ref","position","args","color","envMap","clock","mouse","timer","getElapsedTime","x","y","lookAt","il","length","sphere","current","cos","sin","map","m","PerspectiveCamera","z","setFocalLength","attach","object","makeDefault"],"sourceRoot":""}