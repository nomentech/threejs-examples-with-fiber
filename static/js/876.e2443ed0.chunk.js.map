{"version":3,"file":"static/js/876.e2443ed0.chunk.js","mappings":"+KAAA,IAGaA,GAHQC,OAAOC,WAAa,IAAOD,OAAOC,WAAa,IAAOD,OAAOC,aAC5DD,OAAOC,WAAa,IAAMD,OAAOE,YAAeF,OAAOE,YAAc,K,gCCOvFC,EAAcC,E,oEAEZC,EAAS,CACbC,kBAAkB,EAClBC,cAAe,EACfC,aAAa,GAGTC,EAAa,CACjB,IAAIC,EAAAA,MAAM,IAAIC,EAAAA,QAAQ,EAAG,EAAG,GAAI,GAChC,IAAID,EAAAA,MAAM,IAAIC,EAAAA,QAAQ,GAAI,EAAG,GAAI,GACjC,IAAID,EAAAA,MAAM,IAAIC,EAAAA,QAAQ,EAAG,GAAI,GAAI,IAsEnC,UAzCgB,WACdR,GAAUS,EAAAA,EAAAA,UACVR,GAAaQ,EAAAA,EAAAA,UAGb,IADA,IAAMC,EAAS,GACNC,EAAI,EAAGA,GAAK,GAAIA,GAAK,EAC5BD,EAAOE,MACL,6BACE,2BAAgBC,KAAM,CAACF,EAAI,GAAI,GAAI,OACnC,gCACEG,OAAO,IAAIC,EAAAA,OAAQC,OAAOC,KAAKC,SAAU,GAAK,IAC9CC,KAAMC,EAAAA,WACNC,eAAgBf,EACrBH,iBAAkBD,EAAOC,qBANbQ,IAYf,OACE,UAAC,KAAD,CAAQW,OAAQ,CAACC,SAAU,EAAE,IAAK,IAAK,GAAMC,IAAK,GAAIC,OAAQ7B,EAAAA,EAAc8B,KAAM,EAAGC,IAAK,KACxFC,UAAW,SAACC,GAAD,OA/CM,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,MAAOT,EAAuB,EAAvBA,OAClCQ,EAAGE,sBAAuB,EAC1B,IAAMC,EAAM,IAAIC,EAAAA,GAEhBD,EAAIE,IAAIjC,EAAQ,oBAAoBkC,KAAK,qBAAqBC,UAAS,SAACC,GAGtE,IAFA,IAAMC,EAAWvC,EAAQwC,QAAQD,SAExB5B,EAAI,EAAGA,EAAI4B,EAASE,OAAQ9B,IACnC4B,EAAS5B,GAAG+B,SAASvC,iBAAmBmC,EAE1CR,EAAGa,OAAOZ,EAAOT,MAGnBW,EAAIE,IAAIjC,EAAQ,iBAAkB,EAAG,GAAG0C,KAAK,KAAMR,KAAK,kBAAkBC,UAAS,SAACC,GAClF,IAAK,IAAIO,EAAI,EAAGA,EAAIvC,EAAWmC,OAAQI,IACrCvC,EAAWuC,GAAGC,SAAWR,EAE3BR,EAAGa,OAAOZ,EAAOT,MAGnBW,EAAIE,IAAIjC,EAAQ,eAAekC,KAAK,gBAAgBC,UAAS,SAACC,GAC5DrC,EAAWuC,QAAQO,QAAUT,EAC7BR,EAAGa,OAAOZ,EAAOT,MAyBO0B,CAAenB,IADvC,WAEE,kBAAOoB,OAAO,aAAapC,KAAM,CAAC,YAClC,4BAAiBA,KAAM,CAAC,SAAU,OAAU,KAAMU,SAAU,EAAE,KAAM,EAAG,SACvE,kBAAO2B,IAAKlD,EAAZ,SACGU,KAEH,mBAAOwC,IAAKjD,EAAY8C,SAAS,EAAjC,WACE,wBAAalC,KAAM,CAACP,EAAW,GAAI,EAAG,aACtC,wBAAaO,KAAM,CAACP,EAAW,GAAI,EAAG,UACtC,wBAAaO,KAAM,CAACP,EAAW,GAAI,EAAG,WAExC,SAAC,IAAD,CACE6C,YAAa,EACbC,YAAa,GACbC,WAAW","sources":["contants.tsx","webgl/clipping_intersection/Example.tsx"],"sourcesContent":["const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nconst canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { useRef } from 'react'\nimport { Color, DoubleSide, Plane, Vector3 } from 'three'\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min\"\nimport { Canvas, RootState } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\n\nimport { aspect_ratio } from '../../contants'\n\nlet meshRef: any, helpersRef: any\n\nconst params = {\n  clipIntersection: true,\n  planeConstant: 0,\n  showHelpers: false\n}\n\nconst clipPlanes = [\n  new Plane(new Vector3(1, 0, 0), 0),\n  new Plane(new Vector3(0, -1, 0), 0),\n  new Plane(new Vector3(0, 0, -1), 0)\n]\n\nconst createControls = ({gl, scene, camera}: RootState) => {\n  gl.localClippingEnabled = true\n  const gui = new GUI()\n\n  gui.add(params, 'clipIntersection').name('clip intersection').onChange((value: number) => {\n    const children = meshRef.current.children\n\n    for (let i = 0; i < children.length; i ++) {\n      children[i].material.clipIntersection = value\n    }\n    gl.render(scene, camera)\n  })\n\n  gui.add(params, 'planeConstant', -1, 1).step(0.01).name('plane constant').onChange((value: number) => {\n    for (let j = 0; j < clipPlanes.length; j ++) {\n      clipPlanes[j].constant = value\n    }\n    gl.render(scene, camera)\n  })\n\n  gui.add(params, 'showHelpers').name('show helpers').onChange((value: number) => {\n    helpersRef.current.visible = value\n    gl.render(scene, camera)\n  })\n}\n\nconst Example = () => {\n  meshRef = useRef()\n  helpersRef = useRef()\n\n  const meshes = []\n  for (let i = 1; i <= 30; i += 2) {\n    meshes.push(\n      <mesh key={i}>\n        <sphereGeometry args={[i / 30, 48, 24]} />\n        <meshLambertMaterial\n          color={new Color().setHSL(Math.random(), 0.5, 0.5)}\n          side={DoubleSide}\n          clippingPlanes={clipPlanes}\n\t\t\t\t\tclipIntersection={params.clipIntersection}\n        />\n      </mesh>\n    )\n  }\n\n  return (\n    <Canvas camera={{position: [-1.5, 2.5, 3.0], fov: 40, aspect: aspect_ratio, near: 1, far: 200}} \n      onCreated={(state) => createControls(state)}>\n      <color attach='background' args={['black']} />\n      <hemisphereLight args={[0xffffff, 0x080808, 1.5]} position={[-1.25, 1, 1.25]} />\n      <group ref={meshRef}>\n        {meshes}\n      </group>\n      <group ref={helpersRef} visible={false}>\n        <planeHelper args={[clipPlanes[0], 2, 0xff0000]} />\n        <planeHelper args={[clipPlanes[1], 2, 0x00ff00]} />\n        <planeHelper args={[clipPlanes[2], 2, 0x0000ff]} />\n      </group>\n      <OrbitControls \n        minDistance={1}\n        maxDistance={10}\n        enablePan={false}\n      />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["aspect_ratio","window","innerWidth","innerHeight","meshRef","helpersRef","params","clipIntersection","planeConstant","showHelpers","clipPlanes","Plane","Vector3","useRef","meshes","i","push","args","color","Color","setHSL","Math","random","side","DoubleSide","clippingPlanes","camera","position","fov","aspect","near","far","onCreated","state","gl","scene","localClippingEnabled","gui","GUI","add","name","onChange","value","children","current","length","material","render","step","j","constant","visible","createControls","attach","ref","minDistance","maxDistance","enablePan"],"sourceRoot":""}