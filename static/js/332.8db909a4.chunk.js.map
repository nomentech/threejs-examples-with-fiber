{"version":3,"file":"static/js/332.8db909a4.chunk.js","mappings":"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","sources":["webgl/camera_array/Example.tsx"],"sourcesContent":["import { PerspectiveCamera, Vector4 } from \"three\"\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\"\nimport { useEffect, useRef } from \"react\"\n\nlet CANVAS_WIDTH = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nlet CANVAS_HEIGHT = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\nconst AMOUNT = 6\nconst ASPECT_RATIO = CANVAS_WIDTH / CANVAS_HEIGHT\nconst WIDTH = (CANVAS_WIDTH / AMOUNT) * window.devicePixelRatio\nconst HEIGHT = (CANVAS_HEIGHT / AMOUNT) * window.devicePixelRatio\nlet camera: any, renderer: any\n\nconst onWindowResize = () => {\n  CANVAS_WIDTH = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\n  CANVAS_HEIGHT = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\n  const ASPECT_RATIO = CANVAS_WIDTH / CANVAS_HEIGHT\n  const WIDTH = (CANVAS_WIDTH / AMOUNT) * window.devicePixelRatio\n  const HEIGHT = (CANVAS_HEIGHT / AMOUNT) * window.devicePixelRatio\n\n  camera.aspect = ASPECT_RATIO\n  camera.current.updateProjectionMatrix()\n\n  for (let y = 0; y < AMOUNT; y++) {\n    for (let x = 0; x < AMOUNT; x++) {\n      const subcamera = camera.current.cameras[AMOUNT * y + x]\n      subcamera.viewport.set(\n        Math.floor(x * WIDTH),\n        Math.floor(y * HEIGHT),\n        Math.ceil(WIDTH),\n        Math.ceil(HEIGHT))\n\n      subcamera.aspect = ASPECT_RATIO\n      subcamera.updateProjectionMatrix()\n    }\n  }\n  if (renderer) renderer.setSize(CANVAS_WIDTH, CANVAS_HEIGHT)\n}\n\nconst Background = () => {\n  return (\n    <mesh position={[0, 0, -1]} receiveShadow>\n      <planeGeometry args={[100, 100]} />\n      <meshPhongMaterial color={0x000066} />\n    </mesh>\n  )\n}\n\nconst Cylinder = () => {\n  const mesh: any = useRef()\n  \n  useFrame(() => {\n    mesh.current.rotation.x += 0.005\n    mesh.current.rotation.z += 0.01\n  })\n\n  return (\n    <mesh ref={mesh} castShadow receiveShadow>\n      <cylinderGeometry args={[0.5, 0.5, 1, 32]} />\n      <meshPhongMaterial color={0xff0000} />\n    </mesh>\n  )\n}\n\nconst Cameras = () => {\n  const cameras = []\n  for (let y = 0; y < AMOUNT; y ++) {\n    for (let x = 0; x < AMOUNT; x ++) {\n      const subcamera: any = new PerspectiveCamera(40, ASPECT_RATIO, 0.1, 10)\n      subcamera.viewport = new Vector4( Math.floor(x * WIDTH), Math.floor(y * HEIGHT), Math.ceil(WIDTH), Math.ceil(HEIGHT))\n      subcamera.position.x = (x / AMOUNT) - 0.5\n      subcamera.position.y = 0.5 - (y / AMOUNT)\n      subcamera.position.z = 1.5\n      subcamera.position.multiplyScalar(2)\n      subcamera.lookAt(0, 0, 0)\n      subcamera.updateMatrixWorld()\n      cameras.push(subcamera)\n    }\n  }\n\n  camera = useRef()\n  const set = useThree((state) => state.set)\n  useEffect(() => set({ camera: camera.current }), [])\n  // useFrame(() => camera.current.updateMatrixWorld())\n\n  return (\n    <arrayCamera ref={camera} cameras={cameras} position={[0, 0, 3]} />\n  )\n}\n\nconst Example = () => {\n  // default camera is set to arrayCamera, do resize manually\n  window.addEventListener(\"resize\", onWindowResize)\n\n  return (\n    <Canvas shadows onCreated={({ gl }) => (renderer = gl)}>\n      <Cameras />\n      <ambientLight color={0x222244} />\n      <directionalLight position={[0.5, 0.5, 1]} castShadow shadow-camera-zoom={4} />\n      <Background />\n      <Cylinder />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["camera","renderer","CANVAS_WIDTH","window","innerWidth","CANVAS_HEIGHT","innerHeight","ASPECT_RATIO","WIDTH","devicePixelRatio","HEIGHT","onWindowResize","aspect","current","updateProjectionMatrix","y","x","subcamera","cameras","viewport","set","Math","floor","ceil","setSize","Background","position","receiveShadow","args","color","Cylinder","mesh","useRef","useFrame","rotation","z","ref","castShadow","Cameras","PerspectiveCamera","Vector4","multiplyScalar","lookAt","updateMatrixWorld","push","useThree","state","useEffect","addEventListener","shadows","onCreated","gl"],"sourceRoot":""}