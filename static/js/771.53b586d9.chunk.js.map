{"version":3,"file":"static/js/771.53b586d9.chunk.js","mappings":"gOAAO,IAAMA,EAAeC,OAAOC,WAAa,IAAOD,OAAOC,WAAa,IAAOD,OAAOC,WAC5EC,EAAgBF,OAAOC,WAAa,IAAMD,OAAOG,YAAeH,OAAOG,YAAc,GAErFC,EAAeL,EAAeG,G,2FCGrCG,EAAS,WACb,OAAyEC,EAAAA,EAAAA,UAAQ,WAC/E,IAAMC,EAAS,IACTC,EAAY,IAAIC,EAAAA,oBAA0BF,EAAQ,GAElDG,EAAQF,EAAUG,WAAWC,SAASF,MAC5CF,EAAUK,aAAa,QAAS,IAAIJ,EAAAA,gBAAsB,IAAIK,aAAmB,EAANJ,GAAU,IAarF,IAXA,IAAMK,EAAYP,EAAUQ,QACtBC,EAAYT,EAAUQ,QAEtBE,EAAQ,IAAIT,EAAAA,MACZU,EAAaX,EAAUG,WAAWC,SAClCQ,EAAaL,EAAUJ,WAAWC,SAClCS,EAAaJ,EAAUN,WAAWC,SAClCU,EAAUd,EAAUG,WAAWO,MAC/BK,EAAUR,EAAUJ,WAAWO,MAC/BM,EAAUP,EAAUN,WAAWO,MAE5BO,EAAE,EAAGA,EAAEf,EAAOe,IACrBP,EAAMQ,QAAQP,EAAWQ,KAAKF,GAAGlB,EAAO,GAAG,EAAG,EAAK,IACnDe,EAAQM,OAAOH,EAAGP,EAAMW,EAAGX,EAAMY,EAAGZ,EAAMa,GAE1Cb,EAAMQ,OAAO,GAAIN,EAAWO,KAAKF,GAAGlB,EAAO,GAAG,EAAG,IACjDgB,EAAQK,OAAOH,EAAGP,EAAMW,EAAGX,EAAMY,EAAGZ,EAAMa,GAE1Cb,EAAMc,OAAO,EAAG,IAAKX,EAAWM,KAAKF,GAAGlB,EAAO,GAAG,EAAG,GACrDiB,EAAQI,OAAOH,EAAGP,EAAMW,EAAGX,EAAMY,EAAGZ,EAAMa,GAgB5C,MAAO,CAAEvB,UAAAA,EAAWO,UAAAA,EAAWE,UAAAA,EAAWgB,SAbzB,IAAIxB,EAAAA,kBAAwB,CAC3CS,MAAO,SACPgB,aAAa,EACbC,cAAc,EACdC,UAAW,IASuCC,kBAN1B,IAAI5B,EAAAA,kBAAwB,CACpDS,MAAO,EACPoB,WAAW,EACXC,aAAa,OAId,IA3CK/B,EAAR,EAAQA,UAAWO,EAAnB,EAAmBA,UAAWE,EAA9B,EAA8BA,UAAWgB,EAAzC,EAAyCA,SAAUI,EAAnD,EAAmDA,kBA6CnD,OACE,iCACE,iBAAMzB,SAAU,EAAE,IAAK,EAAG,GAAI4B,SAAU,EAAE,KAAM,EAAG,GAAIC,SAAUjC,EAAWyB,SAAUA,EAAtF,UACE,iBAAMQ,SAAUjC,EAAWyB,SAAUI,OAEvC,iBAAMzB,SAAU,CAAC,IAAK,EAAG,GAAI6B,SAAU1B,EAAWkB,SAAUA,EAA5D,UACE,iBAAMQ,SAAU1B,EAAWkB,SAAUI,OAEvC,iBAAMI,SAAUxB,EAAWgB,SAAUA,EAArC,UACE,iBAAMQ,SAAUxB,EAAWgB,SAAUI,UAMvCK,EAAe,WACnB,OAAuCpC,EAAAA,EAAAA,UAAQ,WAC7C,IAAMqC,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQ,IACfH,EAAOI,OAAS,IAEhB,IAAMC,EAAUL,EAAOM,WAAW,MAC5BC,EAAWF,EAAQG,qBAAqBR,EAAOG,MAAQ,EAAGH,EAAOI,OAAS,EAAG,EAAGJ,EAAOG,MAAQ,EAAGH,EAAOI,OAAS,EAAGJ,EAAOG,MAAQ,GAC1II,EAASE,aAAa,GAAK,0BAC3BF,EAASE,aAAa,EAAG,0BAEzBJ,EAAQK,UAAYH,EACpBF,EAAQM,SAAS,EAAG,EAAGX,EAAOG,MAAOH,EAAOI,QAE5C,IAAMQ,EAAgB,IAAI9C,EAAAA,cAAoBkC,GACxCa,EAAiB,IAAI/C,EAAAA,kBAAwB,CAAEgD,IAAKF,IAG1D,MAAO,CAAEG,UAFS,IAAIjD,EAAAA,cAAoB,IAAK,IAAK,EAAG,GAEnC+C,eAAAA,KACnB,IAlBKE,EAAR,EAAQA,UAAYF,EAApB,EAAoBA,eAoBpB,OACE,iCACE,iBAAMvB,SAAUuB,EAAgBf,SAAUiB,EAAW9C,SAAU,CAAC,GAAI,IAAK,GAAI4B,SAAU,EAAEmB,KAAKC,GAAG,EAAG,EAAG,MACvG,iBAAM3B,SAAUuB,EAAgBf,SAAUiB,EAAW9C,SAAU,EAAE,KAAM,IAAK,GAAI4B,SAAU,EAAEmB,KAAKC,GAAG,EAAG,EAAG,MAC1G,iBAAM3B,SAAUuB,EAAgBf,SAAUiB,EAAW9C,SAAU,CAAC,KAAM,IAAK,GAAI4B,SAAU,EAAEmB,KAAKC,GAAG,EAAG,EAAG,SAKzGC,EAAU,WACd,OAAOC,EAAAA,EAAAA,IAAS,YAA+B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAChCD,EAAOpD,SAASsD,GAAgB,IAAVD,EAAMC,EAAUF,EAAOpD,SAASsD,EACtDF,EAAOpD,SAASuD,GAAiB,KAAVF,EAAME,EAAUH,EAAOpD,SAASuD,EAEvDH,EAAOI,OAAOL,EAAMnD,cAiBxB,UAbgB,WACd,OACE,UAAC,KAAD,CAAQoD,OAAQ,CAAEpD,SAAU,CAAC,EAAG,EAAG,MAAOyD,IAAK,GAAIC,OAAQlE,EAAAA,GAAcmE,KAAM,EAAGC,IAAK,KACrFC,GAAI,CAAEC,WAAW,GAAQC,IAAKC,iBADhC,WAEE,kBAAOC,OAAO,aAAaC,KAAM,CAAC,aAClC,6BAAkBA,KAAM,CAAC,UAAWlE,SAAU,CAAC,EAAG,EAAG,MACrD,SAAC8B,EAAD,KACA,SAACrC,EAAD,KACA,SAACwD,EAAD","sources":["contants.tsx","webgl/geometry_colors/Example.tsx"],"sourcesContent":["export const canvas_width = window.innerWidth > 640 ? (window.innerWidth - 300) : window.innerWidth\nexport const canvas_height = window.innerWidth > 640 ? window.innerHeight : (window.innerHeight - 48)\n\nexport const aspect_ratio = canvas_width / canvas_height","import { useMemo } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from '@react-three/fiber'\n\nimport { aspect_ratio } from '../../contants'\n\nconst Meshes = () => {\n  const { geometry1, geometry2, geometry3, material, wireframeMaterial } = useMemo(() => {\n    const radius = 200\n    const geometry1 = new THREE.IcosahedronGeometry(radius, 1)\n    \n    const count = geometry1.attributes.position.count\n    geometry1.setAttribute('color', new THREE.BufferAttribute(new Float32Array(count*3), 3))\n\n    const geometry2 = geometry1.clone()\n    const geometry3 = geometry1.clone()\n\n    const color = new THREE.Color()\n    const positions1 = geometry1.attributes.position\n    const positions2 = geometry2.attributes.position\n    const positions3 = geometry3.attributes.position\n    const colors1 = geometry1.attributes.color\n    const colors2 = geometry2.attributes.color \n    const colors3 = geometry3.attributes.color\n\n    for (let i=0; i<count; i++) {\n      color.setHSL((positions1.getY(i)/radius+1)/2, 1.0, 0.5)\n      colors1.setXYZ(i, color.r, color.g, color.b)\n\n      color.setHSL(0, (positions2.getY(i)/radius+1)/2, 0.5)\n      colors2.setXYZ(i, color.r, color.g, color.b)\n\n      color.setRGB(1, 0.8-(positions3.getY(i)/radius+1)/2, 0)\n      colors3.setXYZ(i, color.r, color.g, color.b)\n    }\n\n    const material = new THREE.MeshPhongMaterial({\n      color: 0xffffff,\n      flatShading: true,\n      vertexColors: true,\n      shininess: 0\n    })\n\n    const wireframeMaterial = new THREE.MeshBasicMaterial({\n      color: 0x000000,\n      wireframe: true,\n      transparent: true\n    })\n\n    return { geometry1, geometry2, geometry3, material, wireframeMaterial }\n  }, [])\n\n  return (\n    <>\n      <mesh position={[-400, 0, 0]} rotation={[-1.87, 0, 0]} geometry={geometry1} material={material} >\n        <mesh geometry={geometry1} material={wireframeMaterial} />\n      </mesh>\n      <mesh position={[400, 0, 0]} geometry={geometry2} material={material} >\n        <mesh geometry={geometry2} material={wireframeMaterial} />\n      </mesh>\n      <mesh geometry={geometry3} material={material} >\n        <mesh geometry={geometry3} material={wireframeMaterial} />\n      </mesh>\n    </>\n  )\n}\n\nconst ShadowMeshes = () => {\n  const { shadowGeo,  shadowMaterial } = useMemo(() => {\n    const canvas = document.createElement('canvas')\n    canvas.width = 128\n    canvas.height = 128\n\n    const context = canvas.getContext('2d') as CanvasRenderingContext2D\n    const gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2)\n    gradient.addColorStop(0.1, 'rgba(210, 210, 210, 1)')\n    gradient.addColorStop(1, 'rgba(255, 255, 255, 1)')\n\n    context.fillStyle = gradient\n    context.fillRect(0, 0, canvas.width, canvas.height)\n\n    const shadowTexture = new THREE.CanvasTexture(canvas)\n    const shadowMaterial = new THREE.MeshBasicMaterial({ map: shadowTexture })\n    const shadowGeo = new THREE.PlaneGeometry(300, 300, 1, 1)\n\n    return { shadowGeo, shadowMaterial }\n  }, [])\n\n  return (\n    <>\n      <mesh material={shadowMaterial} geometry={shadowGeo} position={[0, -250, 0]} rotation={[-Math.PI/2, 0, 0]} />\n      <mesh material={shadowMaterial} geometry={shadowGeo} position={[-400, -250, 0]} rotation={[-Math.PI/2, 0, 0]} />\n      <mesh material={shadowMaterial} geometry={shadowGeo} position={[400, -250, 0]} rotation={[-Math.PI/2, 0, 0]} />\n    </>\n  )\n}\n\nconst Animate = () => {\n  return useFrame(({ scene, camera, mouse }) => {\n    camera.position.x += (mouse.x * 100 - camera.position.x)\n    camera.position.y += (-mouse.y * 100 - camera.position.y)\n\n    camera.lookAt(scene.position)\n  })\n}\n\nconst Example = () => {\n  return (\n    <Canvas camera={{ position: [0, 0, 1800], fov: 20, aspect: aspect_ratio, near: 1, far: 10000 }} \n      gl={{ antialias: true }} dpr={devicePixelRatio}>\n      <color attach='background' args={[0xffffff]} />\n      <directionalLight args={[0xffffff]} position={[0, 0, 1]} />\n      <ShadowMeshes />\n      <Meshes />\n      <Animate />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["canvas_width","window","innerWidth","canvas_height","innerHeight","aspect_ratio","Meshes","useMemo","radius","geometry1","THREE","count","attributes","position","setAttribute","Float32Array","geometry2","clone","geometry3","color","positions1","positions2","positions3","colors1","colors2","colors3","i","setHSL","getY","setXYZ","r","g","b","setRGB","material","flatShading","vertexColors","shininess","wireframeMaterial","wireframe","transparent","rotation","geometry","ShadowMeshes","canvas","document","createElement","width","height","context","getContext","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","shadowTexture","shadowMaterial","map","shadowGeo","Math","PI","Animate","useFrame","scene","camera","mouse","x","y","lookAt","fov","aspect","near","far","gl","antialias","dpr","devicePixelRatio","attach","args"],"sourceRoot":""}