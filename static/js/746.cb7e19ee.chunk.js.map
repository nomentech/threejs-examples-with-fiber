{"version":3,"file":"static/js/746.cb7e19ee.chunk.js","mappings":"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","sources":["webgl/animation_skinning_blending/Example.tsx"],"sourcesContent":["import { useEffect } from \"react\"\nimport { AnimationAction, AnimationMixer, Group, SkeletonHelper } from \"three\"\nimport { Canvas, useFrame } from \"@react-three/fiber\"\nimport { useGLTF } from \"@react-three/drei\"\nimport { GUI } from \"three/examples/jsm/libs/lil-gui.module.min\"\n\nlet model: Group, skeleton: SkeletonHelper, mixer: AnimationMixer\nconst crossFadeControls: any[] = []\n\nlet idleWeight: number, walkWeight: number, runWeight: number\nlet idleAction: AnimationAction , walkAction: AnimationAction, runAction: AnimationAction\nlet actions: Array<AnimationAction>\n\nlet singleStepMode = false;\nlet sizeOfNextStep = 0;\n\nconst modelPath = `${process.env.PUBLIC_URL}/models/Soldier.glb`\nuseGLTF.preload(modelPath)\n\n// This function is needed, since animationAction.crossFadeTo() disables its start action and sets\n// the start action's timeScale to ((start animation's duration) / (end animation's duration))\nconst setWeight = (action: AnimationAction, weight: number) => {\n  action.enabled = true\n  action.setEffectiveTimeScale(1)\n  action.setEffectiveWeight(weight)\n}\n\nconst deactivateAllActions = () => {\n  actions.forEach(action => {\n    action.stop()\n  });\n}\n\nconst activateAllActions = () => {\n  setWeight(idleAction, settings[\"modify idle weight\"])\n  setWeight(walkAction, settings[\"modify walk weight\"])\n  setWeight(runAction, settings[\"modify run weight\"])\n\n  actions.forEach(action => {\n    action.play()\n  })\n}\n\nconst pauseContinue = () => {\n  if (singleStepMode) {\n    singleStepMode = false\n    unPauseAllActions()\n  } else {\n    if (idleAction.paused) {\n      unPauseAllActions()\n    } else {\n      pauseAllActions()\n    }\n  }\n}\n\nconst pauseAllActions = () => {\n  actions.forEach(action => {\n    action.paused = true\n  })\n}\n\nconst unPauseAllActions = () => {\n  actions.forEach(action => {\n    action.paused = false\n  })\n}\n\nconst showModel = (visibility: boolean) => {\n  model.visible = visibility\n}\n\n\nconst showSkeleton = (visibility: boolean) => {\n  skeleton.visible = visibility\n}\n\nconst modifyTimeScale = (speed: number) => {\n  mixer.timeScale = speed\n}\n\nconst toSingleStepMode = () => {\n  unPauseAllActions()\n\n  singleStepMode = true\n  sizeOfNextStep = settings[\"modify step size\"]\n}\n\nconst prepareCrossFade = (startAction: AnimationAction, endAction: AnimationAction, defaultDuration: number) => {\n  // Switch default / custom crossfade duration (according to the user's choice)\n  const duration = setCrossFadeDuration(defaultDuration)\n\n  // Make sure that we don't go on in singleStepMode, and that all actions are unpaused\n  singleStepMode = false\n  unPauseAllActions()\n\n  // If the current action is 'idle' (duration 4 sec), execute the crossfade immediately;\n  // else wait until the current action has finished its current loop\n  if ( startAction === idleAction ) {\n    executeCrossFade(startAction, endAction, duration)\n  } else {\n    synchronizeCrossFade(startAction, endAction, duration)\n  }\n}\n\nconst setCrossFadeDuration = (defaultDuration: number) => {\n  // Switch default crossfade duration <-> custom crossfade duration\n  if (settings[\"use default duration\"]) {\n    return defaultDuration\n  } else {\n    return settings[\"set custom duration\"]\n  }\n}\n\nconst synchronizeCrossFade = (startAction: AnimationAction, endAction: AnimationAction, duration: number) => {\n  const onLoopFinished = (event: any) => {\n    if (event.action === startAction) {\n      mixer.removeEventListener(\"loop\", onLoopFinished)\n      executeCrossFade(startAction, endAction, duration)\n    }\n  }\n\n  mixer.addEventListener(\"loop\", onLoopFinished)\n}\n\nconst executeCrossFade = (startAction: AnimationAction, endAction: AnimationAction, duration: number) => {\n  // Not only the start action, but also the end action must get a weight of 1 before fading\n  // (concerning the start action this is already guaranteed in this place)\n  setWeight(endAction, 1)\n  endAction.time = 0\n\n  // Crossfade with warping - you can also try without warping by setting the third parameter to false\n  startAction.crossFadeTo( endAction, duration, true )\n}\n\n// Called by the render loop\nconst updateWeightSliders = () => {\n  settings[\"modify idle weight\"] = idleWeight\n  settings[\"modify walk weight\"] = walkWeight\n  settings[\"modify run weight\"] = runWeight\n}\n\n// Called by the render loop\nconst updateCrossFadeControls = () => {\n  if (idleWeight === 1 && walkWeight === 0 && runWeight === 0) {\n    crossFadeControls[0].disable()\n    crossFadeControls[1].enable()\n    crossFadeControls[2].disable()\n    crossFadeControls[3].disable()\n  }\n\n  if (idleWeight === 0 && walkWeight === 1 && runWeight === 0) {\n    crossFadeControls[0].enable()\n    crossFadeControls[1].disable()\n    crossFadeControls[2].enable()\n    crossFadeControls[3].disable()\n  }\n\n  if (idleWeight === 0 && walkWeight === 0 && runWeight === 1) {\n    crossFadeControls[0].disable()\n    crossFadeControls[1].disable()\n    crossFadeControls[2].disable()\n    crossFadeControls[3].enable()\n  }\n}\n\nconst settings = {\n  \"show model\": true,\n  \"show skeleton\": true,\n  \"deactivate all\": deactivateAllActions,\n  \"activate all\": activateAllActions,\n  \"pause/continue\": pauseContinue,\n  \"make single step\": toSingleStepMode,\n  \"modify step size\": 0.05,\n  \"from walk to idle\": () => {\n    prepareCrossFade(walkAction, idleAction, 1.0)\n  },\n  \"from idle to walk\": () => {\n    prepareCrossFade(idleAction, walkAction, 0.5)\n  },\n  \"from walk to run\": () => {\n    prepareCrossFade(walkAction, runAction, 2.5)\n  },\n  \"from run to walk\": () => {\n    prepareCrossFade(runAction, walkAction, 5.0)\n  },\n  \"use default duration\": true,\n  \"set custom duration\": 3.5,\n  \"modify idle weight\": 0.0,\n  \"modify walk weight\": 1.0,\n  \"modify run weight\": 0.0,\n  \"modify time scale\": 1.0\n}\n\nconst Model = () => {\n  const { scene, animations } = useGLTF(modelPath)\n  // const clips = useAnimations(animations, scene)\n\n  model = scene\n  mixer = new AnimationMixer(model)\n\n  idleAction = mixer.clipAction(animations[0])\n  walkAction = mixer.clipAction(animations[3])\n  runAction = mixer.clipAction(animations[1])\n  actions = [ idleAction, walkAction, runAction ]\n\n  skeleton = new SkeletonHelper(scene)\n  skeleton.visible = true\n\n  useFrame((_, delta) => {\n    idleWeight = idleAction.getEffectiveWeight();\n    walkWeight = walkAction.getEffectiveWeight();\n    runWeight = runAction.getEffectiveWeight();\n\n    // Update the panel values if weights are modified from \"outside\" (by crossfadings)\n    updateWeightSliders()\n\n    // Enable/disable crossfade controls according to current weight values\n    updateCrossFadeControls()\n\n    // Get the time elapsed since the last frame, used for mixer update (if not in single step mode)\n    let mixerUpdateDelta = delta\n\n    // If in single step mode, make one step and then do nothing (until the user clicks again)\n    if (singleStepMode) {\n      mixerUpdateDelta = sizeOfNextStep\n      sizeOfNextStep = 0\n    }\n    mixer.update(mixerUpdateDelta)\n  })\n\n  useEffect(() => {\n    scene.traverse((obj: any) => obj.isMesh && (obj.castShadow = true))\n    activateAllActions()\n  }, [scene])\n\n  return (\n    <>\n      <primitive object={scene} />\n      <primitive object={skeleton} />\n      <Controls />\n    </>\n  )\n}\n\nconst Ground = () => {\n  return (\n    <mesh rotation={[-Math.PI/2, 0, 0]} receiveShadow>\n      <planeGeometry args={[100, 100]} />\n      <meshPhongMaterial color={0x999999} depthWrite={false} />\n    </mesh>\n  )\n}\n\nconst Controls = () => {\n  const panel = new GUI({ width: 310 })\n\n  useEffect(() => {\n    const folder1 = panel.addFolder(\"Visibility\")\n    const folder2 = panel.addFolder(\"Activation/Deactivation\")\n    const folder3 = panel.addFolder(\"Pausing/Stepping\")\n    const folder4 = panel.addFolder(\"Crossfading\")\n    const folder5 = panel.addFolder(\"Blend Weights\")\n    const folder6 = panel.addFolder(\"General Speed\")\n\n    folder1.add(settings, \"show model\" ).onChange(showModel)\n    folder1.add(settings, \"show skeleton\" ).onChange(showSkeleton)\n    folder2.add(settings, \"deactivate all\")\n    folder2.add(settings, \"activate all\")\n    folder3.add(settings, \"pause/continue\")\n    folder3.add(settings, \"make single step\")\n    folder3.add(settings, \"modify step size\", 0.01, 0.1, 0.001)\n    crossFadeControls.push(folder4.add(settings, \"from walk to idle\"))\n    crossFadeControls.push(folder4.add(settings, \"from idle to walk\"))\n    crossFadeControls.push(folder4.add(settings, \"from walk to run\"))\n    crossFadeControls.push(folder4.add(settings, \"from run to walk\"))\n    folder4.add(settings, \"use default duration\")\n    folder4.add(settings, \"set custom duration\", 0, 10, 0.01)\n    folder5.add(settings, \"modify idle weight\", 0.0, 1.0, 0.01).listen().onChange((weight: number) => {\n      setWeight(idleAction, weight)\n    })\n    folder5.add(settings, \"modify walk weight\", 0.0, 1.0, 0.01).listen().onChange((weight: number) => {\n      setWeight(walkAction, weight)\n    })\n    folder5.add(settings, \"modify run weight\", 0.0, 1.0, 0.01).listen().onChange((weight: number) => {\n      setWeight(runAction, weight)\n    })\n    folder6.add(settings, \"modify time scale\", 0.0, 1.5, 0.01).onChange( modifyTimeScale )\n\n    folder1.open()\n    folder2.open()\n    folder3.open()\n    folder4.open()\n    folder5.open()\n    folder6.open()\n  }, [])\n\n  return null\n}\n\nconst Example = () => {\n  return (\n    <Canvas \n      camera={{position: [1, 2, -3], fov: 45, near: 1, far: 1000}} \n      dpr={[1, 2]} \n      shadows\n      onCreated={ ({ camera }) => { camera.lookAt(0, 1, 0) } }\n    >\n      <color attach=\"background\" args={[0xa0a0a0]} />\n      <fog attach=\"fog\" color={0xa0a0a0} near={10} far={50} />\n      <hemisphereLight color={0xffffff} groundColor={0x444444} position={[0, 20, 0]} />\n      <directionalLight color={0xffffff} position={[-3, 10, -10]} castShadow\n        shadow-camera-left={-2} shadow-camera-right={2} shadow-camera-top={2} shadow-camera-bottom={-2}\n        shadow-camera-near={0.1} shadow-camera-far={40}\n      />\n      <Ground />\n      <Model />\n    </Canvas>\n  )\n}\n\nexport default Example"],"names":["model","skeleton","mixer","idleWeight","walkWeight","runWeight","idleAction","walkAction","runAction","actions","crossFadeControls","singleStepMode","sizeOfNextStep","modelPath","process","useGLTF","setWeight","action","weight","enabled","setEffectiveTimeScale","setEffectiveWeight","activateAllActions","settings","forEach","play","pauseAllActions","paused","unPauseAllActions","showModel","visibility","visible","showSkeleton","modifyTimeScale","speed","timeScale","prepareCrossFade","startAction","endAction","defaultDuration","duration","setCrossFadeDuration","executeCrossFade","synchronizeCrossFade","addEventListener","onLoopFinished","event","removeEventListener","time","crossFadeTo","stop","Model","scene","animations","AnimationMixer","clipAction","SkeletonHelper","useFrame","_","delta","getEffectiveWeight","disable","enable","mixerUpdateDelta","update","useEffect","traverse","obj","isMesh","castShadow","object","Controls","Ground","rotation","Math","PI","receiveShadow","args","color","depthWrite","panel","GUI","width","folder1","addFolder","folder2","folder3","folder4","folder5","folder6","add","onChange","push","listen","open","camera","position","fov","near","far","dpr","shadows","onCreated","lookAt","attach","groundColor"],"sourceRoot":""}